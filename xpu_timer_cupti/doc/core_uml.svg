<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="4705px" preserveAspectRatio="none" style="width:6685px;height:4705px;background:#FFFFFF;" version="1.1" viewBox="0 0 6685 4705" width="6685px" zoomAndPan="magnify"><defs/><g><!--MD5=[8548b8da2b182fc0b29f139bb1915b75]
cluster atorch--><g id="cluster_atorch"><path d="M488,130 L534,130 A3.75,3.75 0 0 1 536.5,132.5 L543.5,152.4883 L6196,152.4883 A2.5,2.5 0 0 1 6198.5,154.9883 L6198.5,4695.5 A2.5,2.5 0 0 1 6196,4698 L488,4698 A2.5,2.5 0 0 1 485.5,4695.5 L485.5,132.5 A2.5,2.5 0 0 1 488,130 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="485.5" x2="543.5" y1="152.4883" y2="152.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="45" x="489.5" y="145.5352">atorch</text></g><!--MD5=[702050ff9c163faacbc84409d676aa1d]
cluster atorch.util--><g id="cluster_atorch.util"><path d="M2339,4110 L2365,4110 A3.75,3.75 0 0 1 2367.5,4112.5 L2374.5,4132.4883 L6172,4132.4883 A2.5,2.5 0 0 1 6174.5,4134.9883 L6174.5,4671.5 A2.5,2.5 0 0 1 6172,4674 L2339,4674 A2.5,2.5 0 0 1 2336.5,4671.5 L2336.5,4112.5 A2.5,2.5 0 0 1 2339,4110 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="2336.5" x2="2374.5" y1="4132.4883" y2="4132.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="25" x="2340.5" y="4125.5352">util</text></g><!--MD5=[2f8b57a98c722c8f72bacdf697227e9f]
cluster atorch.util.detail--><g id="cluster_atorch.util.detail"><path d="M4595,4153 L4637,4153 A3.75,3.75 0 0 1 4639.5,4155.5 L4646.5,4175.4883 L5730,4175.4883 A2.5,2.5 0 0 1 5732.5,4177.9883 L5732.5,4646.5 A2.5,2.5 0 0 1 5730,4649 L4595,4649 A2.5,2.5 0 0 1 4592.5,4646.5 L4592.5,4155.5 A2.5,2.5 0 0 1 4595,4153 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="4592.5" x2="4646.5" y1="4175.4883" y2="4175.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="41" x="4596.5" y="4168.5352">detail</text></g><!--MD5=[e3ed1faeab1f809fc18ae8aff1adfd8c]
cluster atorch.util.config--><g id="cluster_atorch.util.config"><path d="M4237,4161.5 L4283,4161.5 A3.75,3.75 0 0 1 4285.5,4164 L4292.5,4183.9883 L4566,4183.9883 A2.5,2.5 0 0 1 4568.5,4186.4883 L4568.5,4439 A2.5,2.5 0 0 1 4566,4441.5 L4237,4441.5 A2.5,2.5 0 0 1 4234.5,4439 L4234.5,4164 A2.5,2.5 0 0 1 4237,4161.5 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="4234.5" x2="4292.5" y1="4183.9883" y2="4183.9883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="45" x="4238.5" y="4177.0352">config</text></g><!--MD5=[8907a2e86651869399811ed9814f7a75]
cluster atorch.stack_util--><g id="cluster_atorch.stack_util"><path d="M3876,1491.5 L3947,1491.5 A3.75,3.75 0 0 1 3949.5,1494 L3956.5,1513.9883 L4441,1513.9883 A2.5,2.5 0 0 1 4443.5,1516.4883 L4443.5,1753 A2.5,2.5 0 0 1 4441,1755.5 L3876,1755.5 A2.5,2.5 0 0 1 3873.5,1753 L3873.5,1494 A2.5,2.5 0 0 1 3876,1491.5 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="3873.5" x2="3956.5" y1="1513.9883" y2="1513.9883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="70" x="3877.5" y="1507.0352">stack_util</text></g><!--MD5=[7b84d383622f8f496a77f2582e9aaf63]
cluster atorch.server--><g id="cluster_atorch.server"><path d="M3795,2497 L3840,2497 A3.75,3.75 0 0 1 3842.5,2499.5 L3849.5,2519.4883 L5611,2519.4883 A2.5,2.5 0 0 1 5613.5,2521.9883 L5613.5,3744.5 A2.5,2.5 0 0 1 5611,3747 L3795,3747 A2.5,2.5 0 0 1 3792.5,3744.5 L3792.5,2499.5 A2.5,2.5 0 0 1 3795,2497 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="3792.5" x2="3849.5" y1="2519.4883" y2="2519.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="44" x="3796.5" y="2512.5352">server</text></g><!--MD5=[76adcf1f68c6064464f2a407a1497682]
cluster atorch.nvidia--><g id="cluster_atorch.nvidia"><path d="M512,1236 L557,1236 A3.75,3.75 0 0 1 559.5,1238.5 L566.5,1258.4883 L3794,1258.4883 A2.5,2.5 0 0 1 3796.5,1260.9883 L3796.5,2348 A2.5,2.5 0 0 1 3794,2350.5 L512,2350.5 A2.5,2.5 0 0 1 509.5,2348 L509.5,1238.5 A2.5,2.5 0 0 1 512,1236 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="509.5" x2="566.5" y1="1258.4883" y2="1258.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="44" x="513.5" y="1251.5352">nvidia</text></g><!--MD5=[535d2f74483bba4b8db42054e8e1020a]
cluster atorch.constant--><g id="cluster_atorch.constant"><path d="M3874,3780 L3937,3780 A3.75,3.75 0 0 1 3939.5,3782.5 L3946.5,3802.4883 L4800,3802.4883 A2.5,2.5 0 0 1 4802.5,3804.9883 L4802.5,4074.5 A2.5,2.5 0 0 1 4800,4077 L3874,4077 A2.5,2.5 0 0 1 3871.5,4074.5 L3871.5,3782.5 A2.5,2.5 0 0 1 3874,3780 " style="stroke:#000000;stroke-width:1.5;fill:none;"/><line style="stroke:#000000;stroke-width:1.5;fill:none;" x1="3871.5" x2="3946.5" y1="3802.4883" y2="3802.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="62" x="3875.5" y="3795.5352">constant</text></g><!--MD5=[80d3ea676092e45582edcc21119b3da1]
class atorch.BvarMetrics--><g id="elem_atorch.BvarMetrics"><rect codeLine="9" fill="#F1F1F1" height="394.2539" id="atorch.BvarMetrics" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="987" x="5117" y="2056"/><ellipse cx="5567.25" cy="2072" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5569.7231,2078.1431 Q5569.1421,2078.4419 5568.5029,2078.5913 Q5567.8638,2078.7407 5567.1582,2078.7407 Q5564.6514,2078.7407 5563.3315,2077.0889 Q5562.0117,2075.437 5562.0117,2072.3159 Q5562.0117,2069.1865 5563.3315,2067.5347 Q5564.6514,2065.8828 5567.1582,2065.8828 Q5567.8638,2065.8828 5568.5112,2066.0322 Q5569.1587,2066.1816 5569.7231,2066.4805 L5569.7231,2069.2031 Q5569.0923,2068.6221 5568.4988,2068.3523 Q5567.9053,2068.0825 5567.2744,2068.0825 Q5565.9297,2068.0825 5565.2449,2069.1492 Q5564.5601,2070.2158 5564.5601,2072.3159 Q5564.5601,2074.4077 5565.2449,2075.4744 Q5565.9297,2076.541 5567.2744,2076.541 Q5567.9053,2076.541 5568.4988,2076.2712 Q5569.0923,2076.0015 5569.7231,2075.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="5587.75" y="2077.291">BvarMetrics</text><line style="stroke:#181818;stroke-width:0.5;" x1="5118" x2="6103" y1="2088" y2="2088"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2096"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="5137" y="2105.5352">sync_ : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2112.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="5137" y="2122.0234">alive_counter_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2128.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="5137" y="2138.5117">zero_qps_counter_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2145.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="177" x="5137" y="2155">expose_bvar_ : static bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2161.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="293" x="5137" y="2171.4883">push_interval_ : static std::chrono::seconds</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2178.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="256" x="5137" y="2187.9766">coll_bvar_window_size_ : static time_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2194.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="258" x="5137" y="2204.4648">mm_bvar_window_size_ : static time_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2211.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="303" x="5137" y="2220.9531">start_ : std::chrono::steady_clock::time_point</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2227.9063"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="339" x="5137" y="2237.4414">client_stub_ : std::shared_ptr&lt;server::ClientStub&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2244.3945"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="5137" y="2253.9297">name_ : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2260.8828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="371" x="5137" y="2270.418">timeout_counter_ : std::unique_ptr&lt;TimeoutCounter&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2277.3711"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="5137" y="2286.9063">bv_ : std::unique_ptr&lt;bvar::LatencyRecorder&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5125" y="2293.8594"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="5137" y="2303.3945">flop_ : uint64_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="5118" x2="6103" y1="2310.3477" y2="2310.3477"/><ellipse cx="5128" cy="2321.3477" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="5137" y="2327.8828">BvarMetrics()</text><ellipse cx="5128" cy="2337.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="5137" y="2344.3711">BvarMetrics(BvarMetrics&amp;&amp; other)</text><ellipse cx="5128" cy="2354.3242" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="961" x="5137" y="2360.8594">BvarMetrics(const std::string&amp; name, const std::string_view&amp; type, const uint64_t flop, Labels label, std::shared_ptr&lt;server::ClientStub&gt; stub)</text><ellipse cx="5128" cy="2370.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="5137" y="2377.3477">~BvarMetrics()</text><ellipse cx="5128" cy="2387.3008" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="5137" y="2393.8359">isTimeout(int count) : bool</text><ellipse cx="5128" cy="2403.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="5137" y="2410.3242">pushMetrics(uint64_t dur_in_us) : void</text><ellipse cx="5128" cy="2420.2773" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="167" x="5137" y="2426.8125">setSync(bool sync) : void</text><ellipse cx="5128" cy="2436.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="90" x="5137" y="2443.3008">setUp() : void</text></g><!--MD5=[49c035d38466d6469e92c8fecc276aa2]
class atorch.GpuTimerManager--><g id="elem_atorch.GpuTimerManager"><rect codeLine="33" fill="#F1F1F1" height="460.207" id="atorch.GpuTimerManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="412" x="3952.5" y="713"/><ellipse cx="4018.25" cy="729" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4020.7231,735.1431 Q4020.1421,735.4419 4019.5029,735.5913 Q4018.8638,735.7407 4018.1582,735.7407 Q4015.6514,735.7407 4014.3315,734.0889 Q4013.0117,732.437 4013.0117,729.3159 Q4013.0117,726.1865 4014.3315,724.5347 Q4015.6514,722.8828 4018.1582,722.8828 Q4018.8638,722.8828 4019.5112,723.0322 Q4020.1587,723.1816 4020.7231,723.4805 L4020.7231,726.2031 Q4020.0923,725.6221 4019.4988,725.3523 Q4018.9053,725.0825 4018.2744,725.0825 Q4016.9297,725.0825 4016.2449,726.1492 Q4015.5601,727.2158 4015.5601,729.3159 Q4015.5601,731.4077 4016.2449,732.4744 Q4016.9297,733.541 4018.2744,733.541 Q4018.9053,733.541 4019.4988,733.2712 Q4020.0923,733.0015 4020.7231,732.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="4038.75" y="734.291">GpuTimerManager</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="142" x="4225.5" y="710"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="140" x="4226.5" y="722.6016">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="3953.5" x2="4363.5" y1="745" y2="745"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="753"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="258" x="3972.5" y="762.5352">working_queue_ : BlockingDeque&lt;T&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="769.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="253" x="3972.5" y="779.0234">metrics_manager_ : MetricsManager*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="785.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="3972.5" y="795.5117">event_pool_ : TimerPool&lt;T&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="802.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="141" x="3972.5" y="812">daemon_ : bp::child*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="818.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="293" x="3972.5" y="828.4883">instance_ : inline static GpuTimerManager*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="835.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="251" x="3972.5" y="844.9766">init_flag_ : inline static std::once_flag</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="851.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="3972.5" y="861.4648">dump_stack_count_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="868.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="3972.5" y="877.9531">py_stack_util_ : stack_util::PyStackInProcess*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="884.9063"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="3972.5" y="894.4414">dump_stub_ : std::shared_ptr&lt;ClientStub&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="901.3945"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="3972.5" y="910.9297">daemon_addr_ : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="917.8828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="3972.5" y="927.418">event_poller_ : std::thread</text><ellipse cx="3963.5" cy="937.3711" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="386" x="3972.5" y="943.9063">intercept_manager : typename T::InnerInterceptManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="3953.5" x2="4363.5" y1="950.8594" y2="950.8594"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="958.8594"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="3972.5" y="968.3945">GpuTimerManager()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="975.3477"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="3972.5" y="984.8828">~GpuTimerManager()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="991.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="272" x="3972.5" y="1001.3711">getMetrics(T* work_item) : BvarMetrics&amp;</text><ellipse cx="3963.5" cy="1011.3242" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="3972.5" y="1017.8594">getInstance() : GpuTimerManager&amp;</text><ellipse cx="3963.5" cy="1027.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="97" x="3972.5" y="1034.3477">getEvent() : T*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="1041.3008"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="3972.5" y="1050.8359">deregisterMetrics() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="1057.7891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="3972.5" y="1067.3242">doHang() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="1074.2773"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="3972.5" y="1083.8125">doWork() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="1090.7656"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="138" x="3972.5" y="1100.3008">initSingleton() : void</text><ellipse cx="3963.5" cy="1110.2539" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="3972.5" y="1116.7891">recordEvent(T* event) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="1123.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="3972.5" y="1133.2773">startDaemon(int port) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="1140.2305"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="3972.5" y="1149.7656">startWork() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3960.5" y="1156.7188"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="3972.5" y="1166.2539">stopWork() : void</text></g><!--MD5=[c737efe1c34f9ee4224ae3c1054840af]
class atorch.KernelTraceManager--><g id="elem_atorch.KernelTraceManager"><rect codeLine="61" fill="#F1F1F1" height="328.3008" id="atorch.KernelTraceManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="485" x="4463" y="1469"/><ellipse cx="4630.25" cy="1485" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4632.7231,1491.1431 Q4632.1421,1491.4419 4631.5029,1491.5913 Q4630.8638,1491.7407 4630.1582,1491.7407 Q4627.6514,1491.7407 4626.3315,1490.0889 Q4625.0117,1488.437 4625.0117,1485.3159 Q4625.0117,1482.1865 4626.3315,1480.5347 Q4627.6514,1478.8828 4630.1582,1478.8828 Q4630.8638,1478.8828 4631.5112,1479.0322 Q4632.1587,1479.1816 4632.7231,1479.4805 L4632.7231,1482.2031 Q4632.0923,1481.6221 4631.4988,1481.3523 Q4630.9053,1481.0825 4630.2744,1481.0825 Q4628.9297,1481.0825 4628.2449,1482.1492 Q4627.5601,1483.2158 4627.5601,1485.3159 Q4627.5601,1487.4077 4628.2449,1488.4744 Q4628.9297,1489.541 4630.2744,1489.541 Q4630.9053,1489.541 4631.4988,1489.2712 Q4632.0923,1489.0015 4632.7231,1488.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="4650.75" y="1490.291">KernelTraceManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="4464" x2="4947" y1="1501" y2="1501"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1509"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="4483" y="1518.5352">has_do_prepare_for_dump_ : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1525.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="4483" y="1535.0234">has_trigger_trace_ : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1541.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="307" x="4483" y="1551.5117">instance_ : inline static KernelTraceManager*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1558.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="251" x="4483" y="1568">init_flag_ : inline static std::once_flag</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1574.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="4483" y="1584.4883">switch_ : std::unique_ptr&lt;util::ShmSwitch&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1591.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="278" x="4483" y="1600.9766">kernel_trace_ : std::vector&lt;KernelTrace&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1607.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="4483" y="1617.4648">curr_ : uint32_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1624.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="4483" y="1633.9531">kernel_trace_count_ : uint32_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="4464" x2="4947" y1="1640.9063" y2="1640.9063"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1648.9063"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="4483" y="1658.4414">KernelTraceManager()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1665.3945"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="4483" y="1674.9297">~KernelTraceManager()</text><ellipse cx="4474" cy="1684.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="253" x="4483" y="1691.418">getInstance() : KernelTraceManager&amp;</text><ellipse cx="4474" cy="1701.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="4483" y="1707.9063">prepareDump() : bool</text><ellipse cx="4474" cy="1717.8594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="4483" y="1724.3945">pushTrace(T* work_item) : bool</text><ellipse cx="4474" cy="1734.3477" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="4483" y="1740.8828">triggerTrace() : bool</text><ellipse cx="4474" cy="1750.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="459" x="4483" y="1757.3711">dumpKernelTrace(stack_util::PyStackInProcess* py_stack_util) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1764.3242"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="138" x="4483" y="1773.8594">initSingleton() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4471" y="1780.8125"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="4483" y="1790.3477">reset(const std::string&amp; barrier_name) : void</text></g><!--MD5=[602cc69327bd6b3bdce2fb2c3dbfe33a]
class atorch.LibraryLoader--><g id="elem_atorch.LibraryLoader"><rect codeLine="81" fill="#F1F1F1" height="130.4414" id="atorch.LibraryLoader" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="336" x="907.5" y="878"/><ellipse cx="1024.25" cy="894" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1026.7231,900.1431 Q1026.1421,900.4419 1025.5029,900.5913 Q1024.8638,900.7407 1024.1582,900.7407 Q1021.6514,900.7407 1020.3315,899.0889 Q1019.0117,897.437 1019.0117,894.3159 Q1019.0117,891.1865 1020.3315,889.5347 Q1021.6514,887.8828 1024.1582,887.8828 Q1024.8638,887.8828 1025.5112,888.0322 Q1026.1587,888.1816 1026.7231,888.4805 L1026.7231,891.2031 Q1026.0923,890.6221 1025.4988,890.3523 Q1024.9053,890.0825 1024.2744,890.0825 Q1022.9297,890.0825 1022.2449,891.1492 Q1021.5601,892.2158 1021.5601,894.3159 Q1021.5601,896.4077 1022.2449,897.4744 Q1022.9297,898.541 1024.2744,898.541 Q1024.9053,898.541 1025.4988,898.2712 Q1026.0923,898.0015 1026.7231,897.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="1044.75" y="899.291">LibraryLoader</text><line style="stroke:#181818;stroke-width:0.5;" x1="908.5" x2="1242.5" y1="910" y2="910"/><polygon fill="none" points="918.5,916,922.5,920,918.5,924,914.5,920" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="927.5" y="927.5352">can_use_ : bool</text><polygon fill="none" points="918.5,932.4883,922.5,936.4883,918.5,940.4883,914.5,936.4883" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="927.5" y="944.0234">library_path_ : const std::string</text><polygon fill="none" points="918.5,948.9766,922.5,952.9766,918.5,956.9766,914.5,952.9766" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="927.5" y="960.5117">handle_ : void*</text><line style="stroke:#181818;stroke-width:0.5;" x1="908.5" x2="1242.5" y1="967.4648" y2="967.4648"/><ellipse cx="918.5" cy="978.4648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310" x="927.5" y="985">LibraryLoader(const std::string&amp; library_path)</text><polygon fill="#FFFF44" points="918.5,989.9531,922.5,993.9531,918.5,997.9531,914.5,993.9531" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="927.5" y="1001.4883">LoadLibrary() : void</text></g><!--MD5=[96c7c798b0e4d076ed6bc95f6d4461c8]
class atorch.MetricsManager--><g id="elem_atorch.MetricsManager"><rect codeLine="89" fill="#F1F1F1" height="229.3711" id="atorch.MetricsManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1143" x="5039" y="1518.5"/><ellipse cx="5551.75" cy="1534.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5554.2231,1540.6431 Q5553.6421,1540.9419 5553.0029,1541.0913 Q5552.3638,1541.2407 5551.6582,1541.2407 Q5549.1514,1541.2407 5547.8315,1539.5889 Q5546.5117,1537.937 5546.5117,1534.8159 Q5546.5117,1531.6865 5547.8315,1530.0347 Q5549.1514,1528.3828 5551.6582,1528.3828 Q5552.3638,1528.3828 5553.0112,1528.5322 Q5553.6587,1528.6816 5554.2231,1528.9805 L5554.2231,1531.7031 Q5553.5923,1531.1221 5552.9988,1530.8523 Q5552.4053,1530.5825 5551.7744,1530.5825 Q5550.4297,1530.5825 5549.7449,1531.6492 Q5549.0601,1532.7158 5549.0601,1534.8159 Q5549.0601,1536.9077 5549.7449,1537.9744 Q5550.4297,1539.041 5551.7744,1539.041 Q5552.4053,1539.041 5552.9988,1538.7712 Q5553.5923,1538.5015 5554.2231,1537.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="5572.25" y="1539.791">MetricsManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="5040" x2="6181" y1="1550.5" y2="1550.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5047" y="1558.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="5059" y="1568.0352">deregister_timeout_count_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5047" y="1574.9883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="5059" y="1584.5234">should_run_ : std::atomic&lt;bool&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5047" y="1591.4766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="5059" y="1601.0117">mu_ : std::mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5047" y="1607.9648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="5059" y="1617.5">deregister_thread_ : std::thread</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5047" y="1624.4531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="392" x="5059" y="1633.9883">metrics_ : std::unordered_map&lt;std::string, BvarMetrics*&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="5040" x2="6181" y1="1640.9414" y2="1640.9414"/><ellipse cx="5050" cy="1651.9414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="5059" y="1658.4766">MetricsManager()</text><ellipse cx="5050" cy="1668.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="5059" y="1674.9648">~MetricsManager()</text><ellipse cx="5050" cy="1684.918" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1117" x="5059" y="1691.4531">GetOrCreateMetrics(const std::string&amp; name, const std::string_view&amp; type, const uint64_t flop, Labels label, std::shared_ptr&lt;server::ClientStub&gt; stub) : BvarMetrics&amp;</text><ellipse cx="5050" cy="1701.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="5059" y="1707.9414">DeleteMetrics(bool exit) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5047" y="1714.8945"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="5059" y="1724.4297">checkMetrics() : void</text><ellipse cx="5050" cy="1734.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="5059" y="1740.918">deregisterMetrics() : void</text></g><!--MD5=[8276a0a2a83e2a8ffcb3f1668c85f993]
class atorch.TimeoutCounter--><g id="elem_atorch.TimeoutCounter"><rect codeLine="103" fill="#F1F1F1" height="130.4414" id="atorch.TimeoutCounter" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="549" x="5633" y="2590"/><ellipse cx="5846.75" cy="2606" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5849.2231,2612.1431 Q5848.6421,2612.4419 5848.0029,2612.5913 Q5847.3638,2612.7407 5846.6582,2612.7407 Q5844.1514,2612.7407 5842.8315,2611.0889 Q5841.5117,2609.437 5841.5117,2606.3159 Q5841.5117,2603.1865 5842.8315,2601.5347 Q5844.1514,2599.8828 5846.6582,2599.8828 Q5847.3638,2599.8828 5848.0112,2600.0322 Q5848.6587,2600.1816 5849.2231,2600.4805 L5849.2231,2603.2031 Q5848.5923,2602.6221 5847.9988,2602.3523 Q5847.4053,2602.0825 5846.7744,2602.0825 Q5845.4297,2602.0825 5844.7449,2603.1492 Q5844.0601,2604.2158 5844.0601,2606.3159 Q5844.0601,2608.4077 5844.7449,2609.4744 Q5845.4297,2610.541 5846.7744,2610.541 Q5847.4053,2610.541 5847.9988,2610.2712 Q5848.5923,2610.0015 5849.2231,2609.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="5867.25" y="2611.291">TimeoutCounter</text><line style="stroke:#181818;stroke-width:0.5;" x1="5634" x2="6181" y1="2622" y2="2622"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5641" y="2630"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="357" x="5653" y="2639.5352">counter_ : std::unique_ptr&lt;bvar::Adder&lt;uint64_t&gt;&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5641" y="2646.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="523" x="5653" y="2656.0234">timout_counter_ : std::unique_ptr&lt;bvar::Window&lt;bvar::Adder&lt;uint64_t&gt;&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="5634" x2="6181" y1="2662.9766" y2="2662.9766"/><ellipse cx="5644" cy="2673.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="5653" y="2680.5117">TimeoutCounter()</text><ellipse cx="5644" cy="2690.4648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="5653" y="2697">ThroughtPut() : uint64_t</text><ellipse cx="5644" cy="2706.9531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="5653" y="2713.4883">Add() : void</text></g><!--MD5=[baa8da32c16665663e6921fc72589269]
class atorch.XpuTimer--><g id="elem_atorch.XpuTimer"><rect codeLine="111" fill="#F1F1F1" height="328.3008" id="atorch.XpuTimer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="343" x="1055" y="165"/><ellipse cx="1188.75" cy="181" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1188.6133,176.3481 L1187.4595,181.4199 L1189.7754,181.4199 Z M1187.1191,174.1069 L1190.1157,174.1069 L1193.4609,186.5 L1191.0122,186.5 L1190.2485,183.437 L1186.9697,183.437 L1186.2227,186.5 L1183.7739,186.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="67" x="1209.25" y="186.291">XpuTimer</text><line style="stroke:#181818;stroke-width:0.5;" x1="1056" x2="1397" y1="197" y2="197"/><line style="stroke:#181818;stroke-width:0.5;" x1="1056" x2="1397" y1="205" y2="205"/><ellipse cx="1066" cy="216" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="166" x="1075" y="222.5352">getExtraLabels() : Labels</text><ellipse cx="1066" cy="232.4883" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="214" x="1075" y="239.0234">isHang(uint64_t timeout) : bool</text><ellipse cx="1066" cy="248.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="105" x="1075" y="255.5117">isReady() : bool</text><ellipse cx="1066" cy="265.4648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="136" x="1075" y="272">getTraceCode() : int</text><ellipse cx="1066" cy="281.9531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="152" x="1075" y="288.4883">getName() : std::string</text><ellipse cx="1066" cy="298.4414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="193" x="1075" y="304.9766">getType() : std::string_view&amp;</text><ellipse cx="1066" cy="314.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="217" x="1075" y="321.4648">getExecuteTimeStamp() : time_t</text><ellipse cx="1066" cy="331.418" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="212" x="1075" y="337.9531">getLaunchTimeStamp() : time_t</text><ellipse cx="1066" cy="347.9063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="161" x="1075" y="354.4414">getDuration() : uint64_t</text><ellipse cx="1066" cy="364.3945" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="131" x="1075" y="370.9297">getFlop() : uint64_t</text><ellipse cx="1066" cy="380.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="152" x="1075" y="387.418">getTraceId() : uint64_t</text><ellipse cx="1066" cy="397.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="122" x="1075" y="403.9063">doPrepare() : void</text><ellipse cx="1066" cy="413.8594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="224" x="1075" y="420.3945">doPrepareForDumpTrace() : void</text><ellipse cx="1066" cy="430.3477" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="317" x="1075" y="436.8828">dumpTraceMeta(const std::string&amp; path) : void</text><ellipse cx="1066" cy="446.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="125" x="1075" y="453.3711">endRecord() : void</text><ellipse cx="1066" cy="463.3242" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="99" x="1075" y="469.8594">reBuild() : void</text><ellipse cx="1066" cy="479.8125" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="130" x="1075" y="486.3477">startRecord() : void</text></g><!--MD5=[771842ba0efff873fd1dc2790dc222b7]
class atorch.KernelTrace--><g id="elem_atorch.KernelTrace"><rect codeLine="131" fill="#F1F1F1" height="146.9297" id="atorch.KernelTrace" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="213" x="4599" y="2179.5"/><ellipse cx="4660.25" cy="2195.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4662.7231,2201.6431 Q4662.1421,2201.9419 4661.5029,2202.0913 Q4660.8638,2202.2407 4660.1582,2202.2407 Q4657.6514,2202.2407 4656.3315,2200.5889 Q4655.0117,2198.937 4655.0117,2195.8159 Q4655.0117,2192.6865 4656.3315,2191.0347 Q4657.6514,2189.3828 4660.1582,2189.3828 Q4660.8638,2189.3828 4661.5112,2189.5322 Q4662.1587,2189.6816 4662.7231,2189.9805 L4662.7231,2192.7031 Q4662.0923,2192.1221 4661.4988,2191.8523 Q4660.9053,2191.5825 4660.2744,2191.5825 Q4658.9297,2191.5825 4658.2449,2192.6492 Q4657.5601,2193.7158 4657.5601,2195.8159 Q4657.5601,2197.9077 4658.2449,2198.9744 Q4658.9297,2200.041 4660.2744,2200.041 Q4660.9053,2200.041 4661.4988,2199.7712 Q4662.0923,2199.5015 4662.7231,2198.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="4680.75" y="2200.791">KernelTrace</text><line style="stroke:#181818;stroke-width:0.5;" x1="4600" x2="4811" y1="2211.5" y2="2211.5"/><ellipse cx="4610" cy="2222.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="4619" y="2229.0352">kernel_type : int</text><ellipse cx="4610" cy="2238.9883" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="4619" y="2245.5234">trace_code : int</text><ellipse cx="4610" cy="2255.4766" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="4619" y="2262.0117">execute_timestamp : time_t</text><ellipse cx="4610" cy="2271.9648" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="4619" y="2278.5">delay : uint32_t</text><ellipse cx="4610" cy="2288.4531" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="4619" y="2294.9883">dur : uint32_t</text><ellipse cx="4610" cy="2304.9414" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="4619" y="2311.4766">trace_id : uint64_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="4600" x2="4811" y1="2318.4297" y2="2318.4297"/></g><!--MD5=[4ce66859e491f1f4878d5865c7fcdd69]
class atorch.PyStackTrace--><g id="elem_atorch.PyStackTrace"><rect codeLine="140" fill="#F1F1F1" height="97.4648" id="atorch.PyStackTrace" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="209" x="1316" y="894.5"/><ellipse cx="1371.75" cy="910.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1374.2231,916.6431 Q1373.6421,916.9419 1373.0029,917.0913 Q1372.3638,917.2407 1371.6582,917.2407 Q1369.1514,917.2407 1367.8315,915.5889 Q1366.5117,913.937 1366.5117,910.8159 Q1366.5117,907.6865 1367.8315,906.0347 Q1369.1514,904.3828 1371.6582,904.3828 Q1372.3638,904.3828 1373.0112,904.5322 Q1373.6587,904.6816 1374.2231,904.9805 L1374.2231,907.7031 Q1373.5923,907.1221 1372.9988,906.8523 Q1372.4053,906.5825 1371.7744,906.5825 Q1370.4297,906.5825 1369.7449,907.6492 Q1369.0601,908.7158 1369.0601,910.8159 Q1369.0601,912.9077 1369.7449,913.9744 Q1370.4297,915.041 1371.7744,915.041 Q1372.4053,915.041 1372.9988,914.7712 Q1373.5923,914.5015 1374.2231,913.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="89" x="1392.25" y="915.791">PyStackTrace</text><line style="stroke:#181818;stroke-width:0.5;" x1="1317" x2="1524" y1="926.5" y2="926.5"/><ellipse cx="1327" cy="937.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="1336" y="944.0352">line : int</text><ellipse cx="1327" cy="953.9883" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="1336" y="960.5234">filename : std::string</text><ellipse cx="1327" cy="970.4766" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="1336" y="977.0117">function_name : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="1317" x2="1524" y1="983.9648" y2="983.9648"/></g><!--MD5=[a74421dc1c2ca81ee9723d1072424772]
class atorch.util.BlockingDeque--><g id="elem_atorch.util.BlockingDeque"><rect codeLine="147" fill="#F1F1F1" height="146.9297" id="atorch.util.BlockingDeque" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="570" x="2962.5" y="4237.5"/><ellipse cx="3120.25" cy="4253.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3122.7231,4259.6431 Q3122.1421,4259.9419 3121.5029,4260.0913 Q3120.8638,4260.2407 3120.1582,4260.2407 Q3117.6514,4260.2407 3116.3315,4258.5889 Q3115.0117,4256.937 3115.0117,4253.8159 Q3115.0117,4250.6865 3116.3315,4249.0347 Q3117.6514,4247.3828 3120.1582,4247.3828 Q3120.8638,4247.3828 3121.5112,4247.5322 Q3122.1587,4247.6816 3122.7231,4247.9805 L3122.7231,4250.7031 Q3122.0923,4250.1221 3121.4988,4249.8523 Q3120.9053,4249.5825 3120.2744,4249.5825 Q3118.9297,4249.5825 3118.2449,4250.6492 Q3117.5601,4251.7158 3117.5601,4253.8159 Q3117.5601,4255.9077 3118.2449,4256.9744 Q3118.9297,4258.041 3120.2744,4258.041 Q3120.9053,4258.041 3121.4988,4257.7712 Q3122.0923,4257.5015 3122.7231,4256.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="3140.75" y="4258.791">BlockingDeque</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="142" x="3393.5" y="4234.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="140" x="3394.5" y="4247.1016">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2963.5" x2="3531.5" y1="4269.5" y2="4269.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2970.5" y="4277.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="2982.5" y="4287.0352">mutex_ : mutable std::mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2970.5" y="4293.9883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="236" x="2982.5" y="4303.5234">cond_var_ : std::condition_variable</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2970.5" y="4310.4766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="2982.5" y="4320.0117">deque_ : std::deque&lt;T*&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2963.5" x2="3531.5" y1="4326.9648" y2="4326.9648"/><ellipse cx="2973.5" cy="4337.9648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="544" x="2982.5" y="4344.5">pop(std::function&lt;bool ( T* )&gt; is_hang, std::function&lt;bool ( T* )&gt; is_ready) : T*</text><ellipse cx="2973.5" cy="4354.4531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="411" x="2982.5" y="4360.9883">printHangName(std::vector&lt;std::string&gt;* hang_items) : void</text><ellipse cx="2973.5" cy="4370.9414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="2982.5" y="4377.4766">push(T* valuePtr) : void</text></g><!--MD5=[e0fe2c037edd7650896abad7bd394850]
class atorch.util.EnvVarRegistry--><g id="elem_atorch.util.EnvVarRegistry"><rect codeLine="156" fill="#F1F1F1" height="245.8594" id="atorch.util.EnvVarRegistry" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="648" x="3567.5" y="4188"/><ellipse cx="3836.25" cy="4204" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3838.7231,4210.1431 Q3838.1421,4210.4419 3837.5029,4210.5913 Q3836.8638,4210.7407 3836.1582,4210.7407 Q3833.6514,4210.7407 3832.3315,4209.0889 Q3831.0117,4207.437 3831.0117,4204.3159 Q3831.0117,4201.1865 3832.3315,4199.5347 Q3833.6514,4197.8828 3836.1582,4197.8828 Q3836.8638,4197.8828 3837.5112,4198.0322 Q3838.1587,4198.1816 3838.7231,4198.4805 L3838.7231,4201.2031 Q3838.0923,4200.6221 3837.4988,4200.3523 Q3836.9053,4200.0825 3836.2744,4200.0825 Q3834.9297,4200.0825 3834.2449,4201.1492 Q3833.5601,4202.2158 3833.5601,4204.3159 Q3833.5601,4206.4077 3834.2449,4207.4744 Q3834.9297,4208.541 3836.2744,4208.541 Q3836.9053,4208.541 3837.4988,4208.2712 Q3838.0923,4208.0015 3838.7231,4207.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="3856.75" y="4209.291">EnvVarRegistry</text><line style="stroke:#181818;stroke-width:0.5;" x1="3568.5" x2="4214.5" y1="4220" y2="4220"/><ellipse cx="3578.5" cy="4231" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="3587.5" y="4237.5352">BOOL_DEFAULT_VALUE : static constexpr bool</text><ellipse cx="3578.5" cy="4247.4883" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="286" x="3587.5" y="4254.0234">INT_DEFAULT_VALUE : static constexpr int</text><ellipse cx="3578.5" cy="4263.9766" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="401" x="3587.5" y="4270.5117">STRING_DEFAULT_VALUE : static constexpr std::string_view</text><line style="stroke:#181818;stroke-width:0.5;" x1="3568.5" x2="4214.5" y1="4277.4648" y2="4277.4648"/><ellipse cx="3578.5" cy="4288.4648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="263" x="3587.5" y="4295">GetEnvVar(const std::string&amp; name) : T</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3575.5" y="4301.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="102" x="3587.5" y="4311.4883">getDefault() : T</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3575.5" y="4318.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="360" x="3587.5" y="4327.9766">getEnvInner(std::string env_name, bool* has_env) : T</text><ellipse cx="3578.5" cy="4337.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="379" x="3587.5" y="4344.4648">convert_to_variant(const std::string_view&amp; sv) : VarType</text><ellipse cx="3578.5" cy="4354.418" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="293" x="3587.5" y="4360.9531">convert_to_variant(const char* s) : VarType</text><ellipse cx="3578.5" cy="4370.9063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="287" x="3587.5" y="4377.4414">convert_to_variant(const T&amp; val) : VarType</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3575.5" y="4384.3945"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="274" x="3587.5" y="4393.9297">GetPtree() : boost::property_tree::ptree&amp;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3575.5" y="4400.8828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="408" x="3587.5" y="4410.418">GetRegistry() : std::unordered_map&lt;std::string , VarType&gt;&amp;</text><ellipse cx="3578.5" cy="4420.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="622" x="3587.5" y="4426.9063">RegisterEnvVar(const std::string&amp; name, variant&lt;int, bool, std::string&gt; default_value) : void</text></g><!--MD5=[c0050a24a92ac942df5f73663dad37f2]
class atorch.util.ScopeGuard--><g id="elem_atorch.util.ScopeGuard"><rect codeLine="171" fill="#F1F1F1" height="97.4648" id="atorch.util.ScopeGuard" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="294" x="2633.5" y="4262.5"/><ellipse cx="2734.75" cy="4278.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2737.2231,4284.6431 Q2736.6421,4284.9419 2736.0029,4285.0913 Q2735.3638,4285.2407 2734.6582,4285.2407 Q2732.1514,4285.2407 2730.8315,4283.5889 Q2729.5117,4281.937 2729.5117,4278.8159 Q2729.5117,4275.6865 2730.8315,4274.0347 Q2732.1514,4272.3828 2734.6582,4272.3828 Q2735.3638,4272.3828 2736.0112,4272.5322 Q2736.6587,4272.6816 2737.2231,4272.9805 L2737.2231,4275.7031 Q2736.5923,4275.1221 2735.9988,4274.8523 Q2735.4053,4274.5825 2734.7744,4274.5825 Q2733.4297,4274.5825 2732.7449,4275.6492 Q2732.0601,4276.7158 2732.0601,4278.8159 Q2732.0601,4280.9077 2732.7449,4281.9744 Q2733.4297,4283.041 2734.7744,4283.041 Q2735.4053,4283.041 2735.9988,4282.7712 Q2736.5923,4282.5015 2737.2231,4281.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="2755.25" y="4283.791">ScopeGuard</text><line style="stroke:#181818;stroke-width:0.5;" x1="2634.5" x2="2926.5" y1="4294.5" y2="4294.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="2634.5" x2="2926.5" y1="4302.5" y2="4302.5"/><ellipse cx="2644.5" cy="4313.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="2653.5" y="4320.0352">ScopeGuard(std::function&lt;void ( )&gt; cb)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2641.5" y="4326.9883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="2653.5" y="4336.5234">function&lt;void()</text><ellipse cx="2644.5" cy="4346.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="2653.5" y="4353.0117">~ScopeGuard()</text></g><!--MD5=[8953da6996b134a67fe5101e8fa55d6d]
class atorch.util.ShmType--><g id="elem_atorch.util.ShmType"><rect codeLine="177" fill="#F1F1F1" height="146.9297" id="atorch.util.ShmType" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="410" x="5748.5" y="4511"/><ellipse cx="5845.75" cy="4527" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5848.2231,4533.1431 Q5847.6421,4533.4419 5847.0029,4533.5913 Q5846.3638,4533.7407 5845.6582,4533.7407 Q5843.1514,4533.7407 5841.8315,4532.0889 Q5840.5117,4530.437 5840.5117,4527.3159 Q5840.5117,4524.1865 5841.8315,4522.5347 Q5843.1514,4520.8828 5845.6582,4520.8828 Q5846.3638,4520.8828 5847.0112,4521.0322 Q5847.6587,4521.1816 5848.2231,4521.4805 L5848.2231,4524.2031 Q5847.5923,4523.6221 5846.9988,4523.3523 Q5846.4053,4523.0825 5845.7744,4523.0825 Q5844.4297,4523.0825 5843.7449,4524.1492 Q5843.0601,4525.2158 5843.0601,4527.3159 Q5843.0601,4529.4077 5843.7449,4530.4744 Q5844.4297,4531.541 5845.7744,4531.541 Q5846.4053,4531.541 5846.9988,4531.2712 Q5847.5923,4531.0015 5848.2231,4530.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="5866.25" y="4532.291">ShmType</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="142" x="6019.5" y="4508"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="140" x="6020.5" y="4520.6016">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="5749.5" x2="6157.5" y1="4543" y2="4543"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5756.5" y="4551"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="5768.5" y="4560.5352">obj_ : T*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5756.5" y="4567.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="303" x="5768.5" y="4577.0234">shm_area_ : bip::managed_shared_memory*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5756.5" y="4583.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="5768.5" y="4593.5117">shm_name_ : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="5749.5" x2="6157.5" y1="4600.4648" y2="4600.4648"/><ellipse cx="5759.5" cy="4611.4648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="384" x="5768.5" y="4618">ShmType(int local_world_size, int local_rank, bool main)</text><ellipse cx="5759.5" cy="4627.9531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="5768.5" y="4634.4883">~ShmType()</text><ellipse cx="5759.5" cy="4644.4414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="5768.5" y="4650.9766">getObj() : T*</text></g><!--MD5=[f06f66098ac6cf7c3beb81adc973a0c7]
class atorch.util.TimerPool--><g id="elem_atorch.util.TimerPool"><rect codeLine="186" fill="#F1F1F1" height="130.4414" id="atorch.util.TimerPool" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="246" x="2352.5" y="4246"/><ellipse cx="2367.5" cy="4262" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2369.9731,4268.1431 Q2369.3921,4268.4419 2368.7529,4268.5913 Q2368.1138,4268.7407 2367.4082,4268.7407 Q2364.9014,4268.7407 2363.5815,4267.0889 Q2362.2617,4265.437 2362.2617,4262.3159 Q2362.2617,4259.1865 2363.5815,4257.5347 Q2364.9014,4255.8828 2367.4082,4255.8828 Q2368.1138,4255.8828 2368.7612,4256.0322 Q2369.4087,4256.1816 2369.9731,4256.4805 L2369.9731,4259.2031 Q2369.3423,4258.6221 2368.7488,4258.3523 Q2368.1553,4258.0825 2367.5244,4258.0825 Q2366.1797,4258.0825 2365.4949,4259.1492 Q2364.8101,4260.2158 2364.8101,4262.3159 Q2364.8101,4264.4077 2365.4949,4265.4744 Q2366.1797,4266.541 2367.5244,4266.541 Q2368.1553,4266.541 2368.7488,4266.2712 Q2369.3423,4266.0015 2369.9731,4265.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="2381.5" y="4267.291">TimerPool</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="142" x="2459.5" y="4243"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="140" x="2460.5" y="4255.6016">template&lt;typename T&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2353.5" x2="2597.5" y1="4278" y2="4278"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2360.5" y="4286"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="2372.5" y="4295.5352">pool_ : std::deque&lt;T*&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2360.5" y="4302.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="2372.5" y="4312.0234">mutex_ : std::mutex</text><line style="stroke:#181818;stroke-width:0.5;" x1="2353.5" x2="2597.5" y1="4318.9766" y2="4318.9766"/><ellipse cx="2363.5" cy="4329.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="2372.5" y="4336.5117">TimerPool()</text><ellipse cx="2363.5" cy="4346.4648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="2372.5" y="4353">getObject() : T*</text><ellipse cx="2363.5" cy="4362.9531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="180" x="2372.5" y="4369.4883">returnObject(T* obj) : void</text></g><!--MD5=[450dd92bc303641b6289158169a3b100]
class atorch.util.detail.InterProcessBarrierImpl--><g id="elem_atorch.util.detail.InterProcessBarrierImpl"><rect codeLine="195" fill="#F1F1F1" height="97.4648" id="atorch.util.detail.InterProcessBarrierImpl" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="471" x="4609" y="4262.5"/><ellipse cx="4760.25" cy="4278.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4762.7231,4284.6431 Q4762.1421,4284.9419 4761.5029,4285.0913 Q4760.8638,4285.2407 4760.1582,4285.2407 Q4757.6514,4285.2407 4756.3315,4283.5889 Q4755.0117,4281.937 4755.0117,4278.8159 Q4755.0117,4275.6865 4756.3315,4274.0347 Q4757.6514,4272.3828 4760.1582,4272.3828 Q4760.8638,4272.3828 4761.5112,4272.5322 Q4762.1587,4272.6816 4762.7231,4272.9805 L4762.7231,4275.7031 Q4762.0923,4275.1221 4761.4988,4274.8523 Q4760.9053,4274.5825 4760.2744,4274.5825 Q4758.9297,4274.5825 4758.2449,4275.6492 Q4757.5601,4276.7158 4757.5601,4278.8159 Q4757.5601,4280.9077 4758.2449,4281.9744 Q4758.9297,4283.041 4760.2744,4283.041 Q4760.9053,4283.041 4761.4988,4282.7712 Q4762.0923,4282.5015 4762.7231,4281.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="4780.75" y="4283.791">InterProcessBarrierImpl</text><line style="stroke:#181818;stroke-width:0.5;" x1="4610" x2="5079" y1="4294.5" y2="4294.5"/><ellipse cx="4620" cy="4305.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="4629" y="4312.0352">name_ : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="4610" x2="5079" y1="4318.9883" y2="4318.9883"/><ellipse cx="4620" cy="4329.9883" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="445" x="4629" y="4336.5234">InterProcessBarrierImpl(std::string name, int world_size, int rank)</text><ellipse cx="4620" cy="4346.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="4629" y="4353.0117">~InterProcessBarrierImpl()</text></g><!--MD5=[a6348ade14b97864b3d39b17883aa8ae]
class atorch.util.detail.InterProcessBarrierImpl::Inner--><g id="elem_atorch.util.detail.InterProcessBarrierImpl::Inner"><rect codeLine="201" fill="#F1F1F1" height="97.4648" id="atorch.util.detail.InterProcessBarrierImpl::Inner" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="236" x="4726.5" y="4536"/><ellipse cx="4741.5" cy="4552" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4743.9731,4558.1431 Q4743.3921,4558.4419 4742.7529,4558.5913 Q4742.1138,4558.7407 4741.4082,4558.7407 Q4738.9014,4558.7407 4737.5815,4557.0889 Q4736.2617,4555.437 4736.2617,4552.3159 Q4736.2617,4549.1865 4737.5815,4547.5347 Q4738.9014,4545.8828 4741.4082,4545.8828 Q4742.1138,4545.8828 4742.7612,4546.0322 Q4743.4087,4546.1816 4743.9731,4546.4805 L4743.9731,4549.2031 Q4743.3423,4548.6221 4742.7488,4548.3523 Q4742.1553,4548.0825 4741.5244,4548.0825 Q4740.1797,4548.0825 4739.4949,4549.1492 Q4738.8101,4550.2158 4738.8101,4552.3159 Q4738.8101,4554.4077 4739.4949,4555.4744 Q4740.1797,4556.541 4741.5244,4556.541 Q4742.1553,4556.541 4742.7488,4556.2712 Q4743.3423,4556.0015 4743.9731,4555.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="4755.5" y="4557.291">InterProcessBarrierImpl::Inner</text><line style="stroke:#181818;stroke-width:0.5;" x1="4727.5" x2="4961.5" y1="4568" y2="4568"/><ellipse cx="4737.5" cy="4579" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="62" x="4746.5" y="4585.5352">val : bool</text><line style="stroke:#181818;stroke-width:0.5;" x1="4727.5" x2="4961.5" y1="4592.4883" y2="4592.4883"/><ellipse cx="4737.5" cy="4603.4883" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="4746.5" y="4610.0234">Inner(bool val)</text><ellipse cx="4737.5" cy="4619.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="4746.5" y="4626.5117">reset(bool value) : void</text></g><!--MD5=[bb9ee5881b582516d1c92ae318ce9025]
class atorch.util.detail.ShmSwitch--><g id="elem_atorch.util.detail.ShmSwitch"><rect codeLine="207" fill="#F1F1F1" height="245.8594" id="atorch.util.detail.ShmSwitch" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="601" x="5115" y="4188"/><ellipse cx="5374.25" cy="4204" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5376.7231,4210.1431 Q5376.1421,4210.4419 5375.5029,4210.5913 Q5374.8638,4210.7407 5374.1582,4210.7407 Q5371.6514,4210.7407 5370.3315,4209.0889 Q5369.0117,4207.437 5369.0117,4204.3159 Q5369.0117,4201.1865 5370.3315,4199.5347 Q5371.6514,4197.8828 5374.1582,4197.8828 Q5374.8638,4197.8828 5375.5112,4198.0322 Q5376.1587,4198.1816 5376.7231,4198.4805 L5376.7231,4201.2031 Q5376.0923,4200.6221 5375.4988,4200.3523 Q5374.9053,4200.0825 5374.2744,4200.0825 Q5372.9297,4200.0825 5372.2449,4201.1492 Q5371.5601,4202.2158 5371.5601,4204.3159 Q5371.5601,4206.4077 5372.2449,4207.4744 Q5372.9297,4208.541 5374.2744,4208.541 Q5374.9053,4208.541 5375.4988,4208.2712 Q5376.0923,4208.0015 5376.7231,4207.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="5394.75" y="4209.291">ShmSwitch</text><line style="stroke:#181818;stroke-width:0.5;" x1="5116" x2="5715" y1="4220" y2="4220"/><ellipse cx="5126" cy="4231" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="5135" y="4237.5352">reset_flag : bool</text><ellipse cx="5126" cy="4247.4883" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="5135" y="4254.0234">dump_path : char</text><ellipse cx="5126" cy="4263.9766" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="5135" y="4270.5117">start_dump : int</text><ellipse cx="5126" cy="4280.4648" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="5135" y="4287">timestamp : int64_t</text><ellipse cx="5126" cy="4296.9531" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="316" x="5135" y="4303.4883">BarrierName : static constexpr std::string_view</text><ellipse cx="5126" cy="4313.4414" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="294" x="5135" y="4319.9766">ObjName : static constexpr std::string_view</text><ellipse cx="5126" cy="4329.9297" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="300" x="5135" y="4336.4648">ShmName : static constexpr std::string_view</text><ellipse cx="5126" cy="4346.418" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="5135" y="4352.9531">dump_count : uint32_t</text><ellipse cx="5126" cy="4362.9063" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="5135" y="4369.4414">dump_path_length : uint32_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="5116" x2="5715" y1="4376.3945" y2="4376.3945"/><ellipse cx="5126" cy="4387.3945" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="5135" y="4393.9297">reset() : void</text><ellipse cx="5126" cy="4403.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="450" x="5135" y="4410.418">reset(const std::string&amp; path, uint32_t count, int64_t stamp) : void</text><ellipse cx="5126" cy="4420.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="575" x="5135" y="4426.9063">reset(const std::string&amp; path, uint32_t count, int64_t stamp, bool reset_signal) : void</text></g><!--MD5=[f643906ef3e203945bcab1b0aac47c73]
class atorch.util.config.GlobalConfig--><g id="elem_atorch.util.config.GlobalConfig"><rect codeLine="224" fill="#F1F1F1" height="229.3711" id="atorch.util.config.GlobalConfig" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="301" x="4251" y="4196.5"/><ellipse cx="4352.25" cy="4212.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4354.7231,4218.6431 Q4354.1421,4218.9419 4353.5029,4219.0913 Q4352.8638,4219.2407 4352.1582,4219.2407 Q4349.6514,4219.2407 4348.3315,4217.5889 Q4347.0117,4215.937 4347.0117,4212.8159 Q4347.0117,4209.6865 4348.3315,4208.0347 Q4349.6514,4206.3828 4352.1582,4206.3828 Q4352.8638,4206.3828 4353.5112,4206.5322 Q4354.1587,4206.6816 4354.7231,4206.9805 L4354.7231,4209.7031 Q4354.0923,4209.1221 4353.4988,4208.8523 Q4352.9053,4208.5825 4352.2744,4208.5825 Q4350.9297,4208.5825 4350.2449,4209.6492 Q4349.5601,4210.7158 4349.5601,4212.8159 Q4349.5601,4214.9077 4350.2449,4215.9744 Q4350.9297,4217.041 4352.2744,4217.041 Q4352.9053,4217.041 4353.4988,4216.7712 Q4354.0923,4216.5015 4354.7231,4215.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="4372.75" y="4217.791">GlobalConfig</text><line style="stroke:#181818;stroke-width:0.5;" x1="4252" x2="4551" y1="4228.5" y2="4228.5"/><ellipse cx="4262" cy="4239.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="173" x="4271" y="4246.0352">debug_mode : static bool</text><ellipse cx="4262" cy="4255.9883" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="129" x="4271" y="4262.5234">enable : static bool</text><ellipse cx="4262" cy="4272.4766" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="134" x="4271" y="4279.0117">ip : static std::string</text><ellipse cx="4262" cy="4288.9648" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="188" x="4271" y="4295.5">job_name : static std::string</text><ellipse cx="4262" cy="4305.4531" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="4271" y="4311.9883">pod_name : static std::string</text><ellipse cx="4262" cy="4321.9414" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="177" x="4271" y="4328.4766">rank_str : static std::string</text><ellipse cx="4262" cy="4338.4297" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="275" x="4271" y="4344.9648">all_devices : static std::vector&lt;uint64_t&gt;</text><ellipse cx="4262" cy="4354.918" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="179" x="4271" y="4361.4531">local_rank : static uint32_t</text><ellipse cx="4262" cy="4371.4063" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="221" x="4271" y="4377.9414">local_world_size : static uint32_t</text><ellipse cx="4262" cy="4387.8945" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="140" x="4271" y="4394.4297">rank : static uint32_t</text><ellipse cx="4262" cy="4404.3828" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="182" x="4271" y="4410.918">world_size : static uint32_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="4252" x2="4551" y1="4417.8711" y2="4417.8711"/></g><!--MD5=[02a308e2c26f1b3c820334a7334ce8fe]
class atorch.stack_util.PyStackInProcess--><g id="elem_atorch.stack_util.PyStackInProcess"><rect codeLine="241" fill="#F1F1F1" height="212.8828" id="atorch.stack_util.PyStackInProcess" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="538" x="3889.5" y="1526.5"/><ellipse cx="4096.25" cy="1542.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4098.7231,1548.6431 Q4098.1421,1548.9419 4097.5029,1549.0913 Q4096.8638,1549.2407 4096.1582,1549.2407 Q4093.6514,1549.2407 4092.3315,1547.5889 Q4091.0117,1545.937 4091.0117,1542.8159 Q4091.0117,1539.6865 4092.3315,1538.0347 Q4093.6514,1536.3828 4096.1582,1536.3828 Q4096.8638,1536.3828 4097.5112,1536.5322 Q4098.1587,1536.6816 4098.7231,1536.9805 L4098.7231,1539.7031 Q4098.0923,1539.1221 4097.4988,1538.8523 Q4096.9053,1538.5825 4096.2744,1538.5825 Q4094.9297,1538.5825 4094.2449,1539.6492 Q4093.5601,1540.7158 4093.5601,1542.8159 Q4093.5601,1544.9077 4094.2449,1545.9744 Q4094.9297,1547.041 4096.2744,1547.041 Q4096.9053,1547.041 4097.4988,1546.7712 Q4098.0923,1546.5015 4098.7231,1545.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="4116.75" y="1547.791">PyStackInProcess</text><line style="stroke:#181818;stroke-width:0.5;" x1="3890.5" x2="4426.5" y1="1558.5" y2="1558.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3897.5" y="1566.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="387" x="3909.5" y="1576.0352">stack_maps_ : std::unordered_map&lt;std::string, PyStack&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3897.5" y="1582.9883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="3909.5" y="1592.5234">dump_count_ : uint64_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="3890.5" x2="4426.5" y1="1599.4766" y2="1599.4766"/><ellipse cx="3900.5" cy="1610.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="3909.5" y="1617.0117">PyStackInProcess(const std::string&amp; library_path)</text><ellipse cx="3900.5" cy="1626.9648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="3909.5" y="1633.5">getPyStack() : PyStack</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3897.5" y="1640.4531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="3909.5" y="1649.9883">get_py_stack_fn_ : PyStack (* ) ( )</text><ellipse cx="3900.5" cy="1659.9414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="3909.5" y="1666.4766">shouldDump(uint64_t count) : bool</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3897.5" y="1673.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="3909.5" y="1682.9648">LoadFn() : void</text><ellipse cx="3900.5" cy="1692.918" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="358" x="3909.5" y="1699.4531">dumpPyStack(const std::string&amp; path, int rank) : void</text><ellipse cx="3900.5" cy="1709.4063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="353" x="3909.5" y="1715.9414">insertPyStack(const std::string&amp; kernel_name) : void</text><ellipse cx="3900.5" cy="1725.8945" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="512" x="3909.5" y="1732.4297">insertPyStack(const std::string&amp; kernel_name, const PyStack&amp;&amp; stack) : void</text></g><!--MD5=[1ccd17dbbfbaed38f8bba1d94bdf03aa]
class atorch.server.AsyncJob--><g id="elem_atorch.server.AsyncJob"><rect codeLine="256" fill="#F1F1F1" height="146.9297" id="atorch.server.AsyncJob" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="258" x="5339.5" y="2581.5"/><ellipse cx="5433.25" cy="2597.5" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5433.1133,2592.8481 L5431.9595,2597.9199 L5434.2754,2597.9199 Z M5431.6191,2590.6069 L5434.6157,2590.6069 L5437.9609,2603 L5435.5122,2603 L5434.7485,2599.937 L5431.4697,2599.937 L5430.7227,2603 L5428.2739,2603 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="62" x="5453.75" y="2602.791">AsyncJob</text><line style="stroke:#181818;stroke-width:0.5;" x1="5340.5" x2="5596.5" y1="2613.5" y2="2613.5"/><ellipse cx="5350.5" cy="2624.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="5359.5" y="2631.0352">cntl : brpc::Controller*</text><ellipse cx="5350.5" cy="2640.9883" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="5359.5" y="2647.5234">done : google::protobuf::Closure*</text><line style="stroke:#181818;stroke-width:0.5;" x1="5340.5" x2="5596.5" y1="2654.4766" y2="2654.4766"/><ellipse cx="5350.5" cy="2665.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="5359.5" y="2672.0117">~AsyncJob()</text><ellipse cx="5350.5" cy="2681.9648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="75" x="5359.5" y="2688.5">run() : void</text><ellipse cx="5350.5" cy="2698.4531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="5359.5" y="2704.9883">run_and_delete() : void</text><ellipse cx="5350.5" cy="2714.9414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="220" x="5359.5" y="2721.4766">RunServerJob(void* args) : void*</text></g><!--MD5=[bf2bf44d16d513b1e5ebed221272bd82]
class atorch.server.ClientStub--><g id="elem_atorch.server.ClientStub"><rect codeLine="265" fill="#F1F1F1" height="245.8594" id="atorch.server.ClientStub" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1495" x="3809" y="2532"/><ellipse cx="4516.75" cy="2548" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4519.2231,2554.1431 Q4518.6421,2554.4419 4518.0029,2554.5913 Q4517.3638,2554.7407 4516.6582,2554.7407 Q4514.1514,2554.7407 4512.8315,2553.0889 Q4511.5117,2551.437 4511.5117,2548.3159 Q4511.5117,2545.1865 4512.8315,2543.5347 Q4514.1514,2541.8828 4516.6582,2541.8828 Q4517.3638,2541.8828 4518.0112,2542.0322 Q4518.6587,2542.1816 4519.2231,2542.4805 L4519.2231,2545.2031 Q4518.5923,2544.6221 4517.9988,2544.3523 Q4517.4053,2544.0825 4516.7744,2544.0825 Q4515.4297,2544.0825 4514.7449,2545.1492 Q4514.0601,2546.2158 4514.0601,2548.3159 Q4514.0601,2550.4077 4514.7449,2551.4744 Q4515.4297,2552.541 4516.7744,2552.541 Q4517.4053,2552.541 4517.9988,2552.2712 Q4518.5923,2552.0015 4519.2231,2551.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="4537.25" y="2553.291">ClientStub</text><line style="stroke:#181818;stroke-width:0.5;" x1="3810" x2="5303" y1="2564" y2="2564"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3817" y="2572"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="3829" y="2581.5352">stub_ : HostingService_Stub*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3817" y="2588.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="3829" y="2598.0234">channel_ : brpc::Channel*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3817" y="2604.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="228" x="3829" y="2614.5117">options_ : brpc::ChannelOptions*</text><line style="stroke:#181818;stroke-width:0.5;" x1="3810" x2="5303" y1="2621.4648" y2="2621.4648"/><ellipse cx="3820" cy="2632.4648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="3829" y="2639">ClientStub(std::string endpoint)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3817" y="2645.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="749" x="3829" y="2655.4883">HandleDeregisterPrometheusResponse(brpc::Controller* cntl, RegisterPrometheusResponse* response) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3817" y="2662.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="569" x="3829" y="2671.9766">HandleDumpResponse(brpc::Controller* cntl, StacktraceResponse* response) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3817" y="2678.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="674" x="3829" y="2688.4648">HandlePushPrometheusResponse(brpc::Controller* cntl, google::protobuf::Empty* response) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3817" y="2695.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="734" x="3829" y="2704.9531">HandleRegisterPrometheusResponse(brpc::Controller* cntl, RegisterPrometheusResponse* response) : void</text><ellipse cx="3820" cy="2714.9063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1469" x="3829" y="2721.4414">pushPrometheusMetrics(bool sync, const std::string&amp; name, int local_rank, uint64_t qps, uint64_t avg_latency, uint64_t max_latency, uint64_t p99_latency, uint64_t p9999_latency, double flops, uint64_t count) : void</text><ellipse cx="3820" cy="2731.3945" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="655" x="3829" y="2737.9297">requestDeRegisterPrometheus(bool sync, const std::string&amp; name, int rank, int local_rank) : void</text><ellipse cx="3820" cy="2747.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="945" x="3829" y="2754.418">requestDump(bool sync, int pid, int rank, int world_size, const std::string&amp; dump_path, const std::vector&lt;std::string&gt;&amp; hang_kernel) : void</text><ellipse cx="3820" cy="2764.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1187" x="3829" y="2770.9063">requestRegisterPrometheus(bool sync, const std::string&amp; name, const std::string&amp; gauge_name, int rank, int local_rank, const std::map&lt;std::string, std::string&gt;&amp; labels) : void</text></g><!--MD5=[5be0a782bdafc369a05397c2d9be7c34]
class atorch.server.HostingServiceImpl--><g id="elem_atorch.server.HostingServiceImpl"><rect codeLine="280" fill="#F1F1F1" height="229.3711" id="atorch.server.HostingServiceImpl" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1369" x="4134" y="3162"/><ellipse cx="4748.75" cy="3178" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4751.2231,3184.1431 Q4750.6421,3184.4419 4750.0029,3184.5913 Q4749.3638,3184.7407 4748.6582,3184.7407 Q4746.1514,3184.7407 4744.8315,3183.0889 Q4743.5117,3181.437 4743.5117,3178.3159 Q4743.5117,3175.1865 4744.8315,3173.5347 Q4746.1514,3171.8828 4748.6582,3171.8828 Q4749.3638,3171.8828 4750.0112,3172.0322 Q4750.6587,3172.1816 4751.2231,3172.4805 L4751.2231,3175.2031 Q4750.5923,3174.6221 4749.9988,3174.3523 Q4749.4053,3174.0825 4748.7744,3174.0825 Q4747.4297,3174.0825 4746.7449,3175.1492 Q4746.0601,3176.2158 4746.0601,3178.3159 Q4746.0601,3180.4077 4746.7449,3181.4744 Q4747.4297,3182.541 4748.7744,3182.541 Q4749.4053,3182.541 4749.9988,3182.2712 Q4750.5923,3182.0015 4751.2231,3181.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="4769.25" y="3183.291">HostingServiceImpl</text><line style="stroke:#181818;stroke-width:0.5;" x1="4135" x2="5502" y1="3194" y2="3194"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4142" y="3202"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="4154" y="3211.5352">local_world_size_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4142" y="3218.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="4154" y="3228.0234">rank_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4142" y="3234.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="4154" y="3244.5117">switch_ : std::unique_ptr&lt;util::ShmSwitch&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4142" y="3251.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="349" x="4154" y="3261">mus_ : std::vector&lt;std::unique_ptr&lt;butil::Mutex&gt;&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4142" y="3267.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="666" x="4154" y="3277.4883">prometheus_services_ : std::vector&lt;std::unordered_map&lt;std::string, LocalPrometheusService*&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="4135" x2="5502" y1="3284.4414" y2="3284.4414"/><ellipse cx="4145" cy="3295.4414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="275" x="4154" y="3301.9766">HostingServiceImpl(int local_world_size)</text><ellipse cx="4145" cy="3311.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1343" x="4154" y="3318.4648">DeRegisterPrometheus(google::protobuf::RpcController* cntl_base, const DeRegisterPrometheusRequest* request, RegisterPrometheusResponse* response, google::protobuf::Closure* done) : void</text><ellipse cx="4145" cy="3328.418" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1262" x="4154" y="3334.9531">DumpKernelTrace(google::protobuf::RpcController* cntl_base, const DumpKernelTraceRequest* request, DumpKernelTraceResponse* response, google::protobuf::Closure* done) : void</text><ellipse cx="4145" cy="3344.9063" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1185" x="4154" y="3351.4414">DumpStringStacktrace(google::protobuf::RpcController* cntl_base, const StacktraceRequest* request, StacktraceResponse* response, google::protobuf::Closure* done) : void</text><ellipse cx="4145" cy="3361.3945" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1133" x="4154" y="3367.9297">PushPrometheus(google::protobuf::RpcController* cntl_base, const BrpcMetrics* request, google::protobuf::Empty* response, google::protobuf::Closure* done) : void</text><ellipse cx="4145" cy="3377.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1307" x="4154" y="3384.418">RegisterPrometheus(google::protobuf::RpcController* cntl_base, const RegisterPrometheusRequest* request, RegisterPrometheusResponse* response, google::protobuf::Closure* done) : void</text></g><!--MD5=[61216ecf6658143baa0160417891fa80]
class atorch.server.LocalPrometheusService--><g id="elem_atorch.server.LocalPrometheusService"><rect codeLine="294" fill="#F1F1F1" height="278.8359" id="atorch.server.LocalPrometheusService" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1020" x="3832.5" y="3452"/><ellipse cx="4255.75" cy="3468" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4258.2231,3474.1431 Q4257.6421,3474.4419 4257.0029,3474.5913 Q4256.3638,3474.7407 4255.6582,3474.7407 Q4253.1514,3474.7407 4251.8315,3473.0889 Q4250.5117,3471.437 4250.5117,3468.3159 Q4250.5117,3465.1865 4251.8315,3463.5347 Q4253.1514,3461.8828 4255.6582,3461.8828 Q4256.3638,3461.8828 4257.0112,3462.0322 Q4257.6587,3462.1816 4258.2231,3462.4805 L4258.2231,3465.2031 Q4257.5923,3464.6221 4256.9988,3464.3523 Q4256.4053,3464.0825 4255.7744,3464.0825 Q4254.4297,3464.0825 4253.7449,3465.1492 Q4253.0601,3466.2158 4253.0601,3468.3159 Q4253.0601,3470.4077 4253.7449,3471.4744 Q4254.4297,3472.541 4255.7744,3472.541 Q4256.4053,3472.541 4256.9988,3472.2712 Q4257.5923,3472.0015 4258.2231,3471.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="4276.25" y="3473.291">LocalPrometheusService</text><line style="stroke:#181818;stroke-width:0.5;" x1="3833.5" x2="4851.5" y1="3484" y2="3484"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3840.5" y="3492"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="342" x="3852.5" y="3501.5352">gauges_ : array&lt;Gauge_t, constant::Metrics::CAP&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3840.5" y="3508.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="3852.5" y="3518.0234">rank_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3840.5" y="3524.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="163" x="3852.5" y="3534.5117">mu_ : static butil::Mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3840.5" y="3541.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="269" x="3852.5" y="3551">exposer_ : static prometheus::Exposer*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3840.5" y="3557.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="382" x="3852.5" y="3567.4883">registry_ : static std::shared_ptr&lt;prometheus::Registry&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3840.5" y="3574.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="468" x="3852.5" y="3583.9766">all_familys_ : static std::unordered_map&lt;std::string, Family_t_Array&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3840.5" y="3590.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="354" x="3852.5" y="3600.4648">all_gauges_ : static std::vector&lt;Gauge_t_MapArray&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3840.5" y="3607.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="3852.5" y="3616.9531">gauge_prefix_ : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3840.5" y="3623.9063"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="3852.5" y="3633.4414">kernel_name_ : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="3833.5" x2="4851.5" y1="3640.3945" y2="3640.3945"/><ellipse cx="3843.5" cy="3651.3945" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="994" x="3852.5" y="3657.9297">LocalPrometheusService(const std::string&amp; gauge_prefix, const std::string&amp; kernel_name, const std::map&lt;std::string, std::string&gt;&amp; label, int rank)</text><ellipse cx="3843.5" cy="3667.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="401" x="3852.5" y="3674.418">LocalPrometheusService(LocalPrometheusService&amp;&amp; other)</text><ellipse cx="3843.5" cy="3684.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="3852.5" y="3690.9063">~LocalPrometheusService()</text><ellipse cx="3843.5" cy="3700.8594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="3852.5" y="3707.3945">push(const BrpcMetrics* metrics) : void</text><ellipse cx="3843.5" cy="3717.3477" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="283" x="3852.5" y="3723.8828">setUp(int port, int local_world_size) : void</text></g><!--MD5=[51316259c15ee74a86e5b0b55ca624ce]
class atorch.server.MainServer--><g id="elem_atorch.server.MainServer"><rect codeLine="311" fill="#F1F1F1" height="262.3477" id="atorch.server.MainServer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="702" x="4895.5" y="2839"/><ellipse cx="5204.25" cy="2855" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M5206.7231,2861.1431 Q5206.1421,2861.4419 5205.5029,2861.5913 Q5204.8638,2861.7407 5204.1582,2861.7407 Q5201.6514,2861.7407 5200.3315,2860.0889 Q5199.0117,2858.437 5199.0117,2855.3159 Q5199.0117,2852.1865 5200.3315,2850.5347 Q5201.6514,2848.8828 5204.1582,2848.8828 Q5204.8638,2848.8828 5205.5112,2849.0322 Q5206.1587,2849.1816 5206.7231,2849.4805 L5206.7231,2852.2031 Q5206.0923,2851.6221 5205.4988,2851.3523 Q5204.9053,2851.0825 5204.2744,2851.0825 Q5202.9297,2851.0825 5202.2449,2852.1492 Q5201.5601,2853.2158 5201.5601,2855.3159 Q5201.5601,2857.4077 5202.2449,2858.4744 Q5202.9297,2859.541 5204.2744,2859.541 Q5204.9053,2859.541 5205.4988,2859.2712 Q5206.0923,2859.0015 5206.7231,2858.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="5224.75" y="2860.291">MainServer</text><line style="stroke:#181818;stroke-width:0.5;" x1="4896.5" x2="5596.5" y1="2871" y2="2871"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4903.5" y="2879"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="4915.5" y="2888.5352">server_ : brpc::Server</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4903.5" y="2895.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="207" x="4915.5" y="2905.0234">options_ : brpc::ServerOptions</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4903.5" y="2911.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="4915.5" y="2921.5117">local_world_size_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4903.5" y="2928.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="4915.5" y="2938">thread_num_ : int</text><ellipse cx="4906.5" cy="2947.9531" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="342" x="4915.5" y="2954.4883">DUMMY_SERVER : static constexpr std::string_view</text><ellipse cx="4906.5" cy="2964.4414" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="356" x="4915.5" y="2970.9766">HOSTING_SERVICE : static constexpr std::string_view</text><ellipse cx="4906.5" cy="2980.9297" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="395" x="4915.5" y="2987.4648">LOCAL_RANK_0_SERVER : static constexpr std::string_view</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4903.5" y="2994.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="4915.5" y="3003.9531">endpoint_ : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4903.5" y="3010.9063"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="528" x="4915.5" y="3020.4414">services_ : std::unordered_map&lt;std::string_view, google::protobuf::Service*&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="4896.5" x2="5596.5" y1="3027.3945" y2="3027.3945"/><ellipse cx="4906.5" cy="3038.3945" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="676" x="4915.5" y="3044.9297">MainServer(const std::string&amp; endpoint, int thread_num, int prometheus_port, int local_world_size)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4903.5" y="3051.8828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="378" x="4915.5" y="3061.418">addService(const std::string_view&amp; service_name) : void</text><ellipse cx="4906.5" cy="3071.3711" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="4915.5" y="3077.9063">join() : void</text><ellipse cx="4906.5" cy="3087.8594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="321" x="4915.5" y="3094.3945">start(const std::string_view&amp; server_type) : void</text></g><!--MD5=[85e19d0a908b61eb777353cef8446d47]
class atorch.server.StringStacktraceJob--><g id="elem_atorch.server.StringStacktraceJob"><rect codeLine="327" fill="#F1F1F1" height="146.9297" id="atorch.server.StringStacktraceJob" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="263" x="4597" y="2896.5"/><ellipse cx="4657.75" cy="2912.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4660.2231,2918.6431 Q4659.6421,2918.9419 4659.0029,2919.0913 Q4658.3638,2919.2407 4657.6582,2919.2407 Q4655.1514,2919.2407 4653.8315,2917.5889 Q4652.5117,2915.937 4652.5117,2912.8159 Q4652.5117,2909.6865 4653.8315,2908.0347 Q4655.1514,2906.3828 4657.6582,2906.3828 Q4658.3638,2906.3828 4659.0112,2906.5322 Q4659.6587,2906.6816 4660.2231,2906.9805 L4660.2231,2909.7031 Q4659.5923,2909.1221 4658.9988,2908.8523 Q4658.4053,2908.5825 4657.7744,2908.5825 Q4656.4297,2908.5825 4655.7449,2909.6492 Q4655.0601,2910.7158 4655.0601,2912.8159 Q4655.0601,2914.9077 4655.7449,2915.9744 Q4656.4297,2917.041 4657.7744,2917.041 Q4658.4053,2917.041 4658.9988,2916.7712 Q4659.5923,2916.5015 4660.2231,2915.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="4678.25" y="2917.791">StringStacktraceJob</text><line style="stroke:#181818;stroke-width:0.5;" x1="4598" x2="4859" y1="2928.5" y2="2928.5"/><ellipse cx="4608" cy="2939.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="4617" y="2946.0352">response : StacktraceResponse*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4605" y="2952.9883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="4617" y="2962.5234">stderr_buf : butil::IOBuf</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4605" y="2969.4766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="4617" y="2979.0117">stdout_buf : butil::IOBuf</text><ellipse cx="4608" cy="2988.9648" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="4617" y="2995.5">request : const StacktraceRequest*</text><line style="stroke:#181818;stroke-width:0.5;" x1="4598" x2="4859" y1="3002.4531" y2="3002.4531"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="4605" y="3010.4531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="4617" y="3019.9883">~StringStacktraceJob()</text><ellipse cx="4608" cy="3029.9414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="4617" y="3036.4766">run() : void</text></g><!--MD5=[0a715ebcb049837c0456719eece1472b]
class atorch.nvidia.EventStartTimeHelper--><g id="elem_atorch.nvidia.EventStartTimeHelper"><rect codeLine="338" fill="#F1F1F1" height="146.9297" id="atorch.nvidia.EventStartTimeHelper" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="366" x="1418.5" y="2179.5"/><ellipse cx="1523.25" cy="2195.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1525.7231,2201.6431 Q1525.1421,2201.9419 1524.5029,2202.0913 Q1523.8638,2202.2407 1523.1582,2202.2407 Q1520.6514,2202.2407 1519.3315,2200.5889 Q1518.0117,2198.937 1518.0117,2195.8159 Q1518.0117,2192.6865 1519.3315,2191.0347 Q1520.6514,2189.3828 1523.1582,2189.3828 Q1523.8638,2189.3828 1524.5112,2189.5322 Q1525.1587,2189.6816 1525.7231,2189.9805 L1525.7231,2192.7031 Q1525.0923,2192.1221 1524.4988,2191.8523 Q1523.9053,2191.5825 1523.2744,2191.5825 Q1521.9297,2191.5825 1521.2449,2192.6492 Q1520.5601,2193.7158 1520.5601,2195.8159 Q1520.5601,2197.9077 1521.2449,2198.9744 Q1521.9297,2200.041 1523.2744,2200.041 Q1523.9053,2200.041 1524.4988,2199.7712 Q1525.0923,2199.5015 1525.7231,2198.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="1543.75" y="2200.791">EventStartTimeHelper</text><line style="stroke:#181818;stroke-width:0.5;" x1="1419.5" x2="1783.5" y1="2211.5" y2="2211.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1426.5" y="2219.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="1438.5" y="2229.0352">start_event_ : cudaEvent_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1426.5" y="2235.9883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="1438.5" y="2245.5234">stream_ : cudaStream_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1426.5" y="2252.4766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="1438.5" y="2262.0117">cpu_time_ : time_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="1419.5" x2="1783.5" y1="2268.9648" y2="2268.9648"/><ellipse cx="1429.5" cy="2279.9648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="1438.5" y="2286.5">EventStartTimeHelper(cudaStream_t s)</text><ellipse cx="1429.5" cy="2296.4531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="1438.5" y="2302.9883">getTime(cudaEvent_t kernel_launch_start) : time_t</text><ellipse cx="1429.5" cy="2312.9414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="1438.5" y="2319.4766">reset() : void</text></g><!--MD5=[8bd6375ae54fd87dee9778435be9e9f3]
class atorch.nvidia.FaParser--><g id="elem_atorch.nvidia.FaParser"><rect codeLine="347" fill="#F1F1F1" height="146.9297" id="atorch.nvidia.FaParser" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="358" x="525.5" y="1559.5"/><ellipse cx="670.75" cy="1575.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M673.2231,1581.6431 Q672.6421,1581.9419 672.0029,1582.0913 Q671.3638,1582.2407 670.6582,1582.2407 Q668.1514,1582.2407 666.8315,1580.5889 Q665.5117,1578.937 665.5117,1575.8159 Q665.5117,1572.6865 666.8315,1571.0347 Q668.1514,1569.3828 670.6582,1569.3828 Q671.3638,1569.3828 672.0112,1569.5322 Q672.6587,1569.6816 673.2231,1569.9805 L673.2231,1572.7031 Q672.5923,1572.1221 671.9988,1571.8523 Q671.4053,1571.5825 670.7744,1571.5825 Q669.4297,1571.5825 668.7449,1572.6492 Q668.0601,1573.7158 668.0601,1575.8159 Q668.0601,1577.9077 668.7449,1578.9744 Q669.4297,1580.041 670.7744,1580.041 Q671.4053,1580.041 671.9988,1579.7712 Q672.5923,1579.5015 673.2231,1578.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="59" x="691.25" y="1580.791">FaParser</text><line style="stroke:#181818;stroke-width:0.5;" x1="526.5" x2="882.5" y1="1591.5" y2="1591.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="526.5" x2="882.5" y1="1599.5" y2="1599.5"/><ellipse cx="536.5" cy="1610.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="275" x="545.5" y="1617.0352">FaParser(const std::string&amp; library_path)</text><ellipse cx="536.5" cy="1626.9883" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="323" x="545.5" y="1633.5234">getFaBwdShape(void**) : std::vector&lt;uint64_t&gt;</text><ellipse cx="536.5" cy="1643.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="323" x="545.5" y="1650.0117">getFaFwdShape(void**) : std::vector&lt;uint64_t&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="533.5" y="1656.9648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="545.5" y="1666.5">get_bwd_shape_ : vector&lt;uint64_t&gt;(* ) ( void** )</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="533.5" y="1673.4531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="545.5" y="1682.9883">get_fwd_shape_ : vector&lt;uint64_t&gt;(* ) ( void** )</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="533.5" y="1689.9414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="545.5" y="1699.4766">LoadFn() : void</text></g><!--MD5=[92b1ffd335b44ddae3495815b5d0aebe]
class atorch.nvidia.InterceptManager--><g id="elem_atorch.nvidia.InterceptManager"><rect codeLine="356" fill="#F1F1F1" height="196.3945" id="atorch.nvidia.InterceptManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1327" x="2453" y="1535"/><ellipse cx="3051.75" cy="1551" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3054.2231,1557.1431 Q3053.6421,1557.4419 3053.0029,1557.5913 Q3052.3638,1557.7407 3051.6582,1557.7407 Q3049.1514,1557.7407 3047.8315,1556.0889 Q3046.5117,1554.437 3046.5117,1551.3159 Q3046.5117,1548.1865 3047.8315,1546.5347 Q3049.1514,1544.8828 3051.6582,1544.8828 Q3052.3638,1544.8828 3053.0112,1545.0322 Q3053.6587,1545.1816 3054.2231,1545.4805 L3054.2231,1548.2031 Q3053.5923,1547.6221 3052.9988,1547.3523 Q3052.4053,1547.0825 3051.7744,1547.0825 Q3050.4297,1547.0825 3049.7449,1548.1492 Q3049.0601,1549.2158 3049.0601,1551.3159 Q3049.0601,1553.4077 3049.7449,1554.4744 Q3050.4297,1555.541 3051.7744,1555.541 Q3052.4053,1555.541 3052.9988,1555.2712 Q3053.5923,1555.0015 3054.2231,1554.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="3072.25" y="1556.291">InterceptManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="2454" x2="3779" y1="1567" y2="1567"/><line style="stroke:#181818;stroke-width:0.5;" x1="2454" x2="3779" y1="1575" y2="1575"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2461" y="1583"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="573" x="2473" y="1592.5352">FnReturn()&gt;handleFa ( void** args, const std::string&amp; name, const std::string&amp; type)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2461" y="1599.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="786" x="2473" y="1609.0234">FnReturn()&gt;handleNccl ( const cudaLaunchConfig_t* config, const void* func, void** args, const std::string&amp; name)</text><ellipse cx="2464" cy="1618.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1075" x="2473" y="1625.5117">FnReturn()&gt;handleCudaLaunchKernelExC ( const cudaLaunchConfig_t* config, const void* func, void** args, const std::string&amp; name, const std::string&amp; type)</text><ellipse cx="2464" cy="1635.4648" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1301" x="2473" y="1642">FnReturn()&gt;handleCudaLaunchKernel ( const void* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem, cudaStream_t stream, const std::string&amp; name, const std::string&amp; type)</text><ellipse cx="2464" cy="1651.9531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="496" x="2473" y="1658.4883">isIntercepted(const void* func, std::string* name, std::string* type) : bool</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2461" y="1665.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="2473" y="1674.9766">getOffset(const void* symbol) : ptrdiff_t</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2461" y="1681.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="357" x="2473" y="1691.4648">getFaBwdShape(void** args) : std::vector&lt;uint64_t&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2461" y="1698.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="357" x="2473" y="1707.9531">getFaFwdShape(void** args) : std::vector&lt;uint64_t&gt;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2461" y="1714.9063"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="2473" y="1724.4414">getNcclShape(void** args) : uint64_t</text></g><!--MD5=[4cf617e5e590fd3e720804585860f5ce]
class atorch.nvidia.NcclParser--><g id="elem_atorch.nvidia.NcclParser"><rect codeLine="368" fill="#F1F1F1" height="113.9531" id="atorch.nvidia.NcclParser" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="313" x="919" y="1576"/><ellipse cx="1035.75" cy="1592" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1038.2231,1598.1431 Q1037.6421,1598.4419 1037.0029,1598.5913 Q1036.3638,1598.7407 1035.6582,1598.7407 Q1033.1514,1598.7407 1031.8315,1597.0889 Q1030.5117,1595.437 1030.5117,1592.3159 Q1030.5117,1589.1865 1031.8315,1587.5347 Q1033.1514,1585.8828 1035.6582,1585.8828 Q1036.3638,1585.8828 1037.0112,1586.0322 Q1037.6587,1586.1816 1038.2231,1586.4805 L1038.2231,1589.2031 Q1037.5923,1588.6221 1036.9988,1588.3523 Q1036.4053,1588.0825 1035.7744,1588.0825 Q1034.4297,1588.0825 1033.7449,1589.1492 Q1033.0601,1590.2158 1033.0601,1592.3159 Q1033.0601,1594.4077 1033.7449,1595.4744 Q1034.4297,1596.541 1035.7744,1596.541 Q1036.4053,1596.541 1036.9988,1596.2712 Q1037.5923,1596.0015 1038.2231,1595.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="1056.25" y="1597.291">NcclParser</text><line style="stroke:#181818;stroke-width:0.5;" x1="920" x2="1231" y1="1608" y2="1608"/><line style="stroke:#181818;stroke-width:0.5;" x1="920" x2="1231" y1="1616" y2="1616"/><ellipse cx="930" cy="1627" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="939" y="1633.5352">NcclParser(const std::string&amp; library_path)</text><ellipse cx="930" cy="1643.4883" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="939" y="1650.0234">getNcclShape(void**) : uint64_t</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="927" y="1656.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="939" y="1666.5117">get_nccl_shape_ : uint64_t (* ) ( void** )</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="927" y="1673.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="939" y="1683">LoadFn() : void</text></g><!--MD5=[d08cb5265195dfa63e8042629ef68fd5]
class atorch.nvidia.NvidiaGpuTimer--><g id="elem_atorch.nvidia.NvidiaGpuTimer"><rect codeLine="375" fill="#F1F1F1" height="724.0195" id="atorch.nvidia.NvidiaGpuTimer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1150" x="1267.5" y="1271"/><ellipse cx="1783.25" cy="1287" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1785.7231,1293.1431 Q1785.1421,1293.4419 1784.5029,1293.5913 Q1783.8638,1293.7407 1783.1582,1293.7407 Q1780.6514,1293.7407 1779.3315,1292.0889 Q1778.0117,1290.437 1778.0117,1287.3159 Q1778.0117,1284.1865 1779.3315,1282.5347 Q1780.6514,1280.8828 1783.1582,1280.8828 Q1783.8638,1280.8828 1784.5112,1281.0322 Q1785.1587,1281.1816 1785.7231,1281.4805 L1785.7231,1284.2031 Q1785.0923,1283.6221 1784.4988,1283.3523 Q1783.9053,1283.0825 1783.2744,1283.0825 Q1781.9297,1283.0825 1781.2449,1284.1492 Q1780.5601,1285.2158 1780.5601,1287.3159 Q1780.5601,1289.4077 1781.2449,1290.4744 Q1781.9297,1291.541 1783.2744,1291.541 Q1783.9053,1291.541 1784.4988,1291.2712 Q1785.0923,1291.0015 1785.7231,1290.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="1803.75" y="1292.291">NvidiaGpuTimer</text><line style="stroke:#181818;stroke-width:0.5;" x1="1268.5" x2="2416.5" y1="1303" y2="1303"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1311"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="1287.5" y="1320.5352">extra_labels_ : Labels</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1327.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="291" x="1287.5" y="1337.0234">inner_rebuild_cb_ : MatmulBuilderCallback</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1343.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="1287.5" y="1353.5117">start_event_ : cudaEvent_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1360.4648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="1287.5" y="1370">stop_event_ : cudaEvent_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1376.9531"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="1287.5" y="1386.4883">stream_ : cudaStream_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1393.4414"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="1287.5" y="1402.9766">trace_code_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1409.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="251" x="1287.5" y="1419.4648">kernel_encoding_counter_ : static int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1426.418"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="617" x="1287.5" y="1435.9531">stream_timer_helper_ : static std::unordered_map&lt;cudaStream_t, EventStartTimeHelper*&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1442.9063"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="417" x="1287.5" y="1452.4414">trace_id_counter_ : static std::unordered_map&lt;int, uint64_t&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1459.3945"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="411" x="1287.5" y="1468.9297">tracing_metas_ : static std::unordered_map&lt;std::string, int&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1475.8828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="458" x="1287.5" y="1485.418">launch_time_ : std::chrono::time_point&lt;std::chrono::system_clock&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1492.3711"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="1287.5" y="1501.9063">name_ : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1508.8594"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="1287.5" y="1518.3945">type_ : std::string_view</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1525.3477"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="1287.5" y="1534.8828">launch_time_timestamp_ : time_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1541.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="1287.5" y="1551.3711">flop_ : uint64_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1558.3242"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="1287.5" y="1567.8594">hang_counter_ : uint64_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1574.8125"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="1287.5" y="1584.3477">trace_id_ : uint64_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="1268.5" x2="2416.5" y1="1591.3008" y2="1591.3008"/><ellipse cx="1278.5" cy="1602.3008" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="1287.5" y="1608.8359">NvidiaGpuTimer()</text><ellipse cx="1278.5" cy="1618.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="1287.5" y="1625.3242">getExtraLabels() : Labels</text><ellipse cx="1278.5" cy="1635.2773" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="1287.5" y="1641.8125">isHang(uint64_t timeout) : bool</text><ellipse cx="1278.5" cy="1651.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="1287.5" y="1658.3008">isReady() : bool</text><ellipse cx="1278.5" cy="1668.2539" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="1287.5" y="1674.7891">getTraceCode() : int</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1681.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="1287.5" y="1691.2773">string() : std::function&lt;const</text><ellipse cx="1278.5" cy="1701.2305" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="1287.5" y="1707.7656">getName() : std::string</text><ellipse cx="1278.5" cy="1717.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193" x="1287.5" y="1724.2539">getType() : std::string_view&amp;</text><ellipse cx="1278.5" cy="1734.207" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="1287.5" y="1740.7422">getExecuteTimeStamp() : time_t</text><ellipse cx="1278.5" cy="1750.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="212" x="1287.5" y="1757.2305">getLaunchTimeStamp() : time_t</text><ellipse cx="1278.5" cy="1767.1836" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="1287.5" y="1773.7188">getDuration() : uint64_t</text><ellipse cx="1278.5" cy="1783.6719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="1287.5" y="1790.207">getFlop() : uint64_t</text><ellipse cx="1278.5" cy="1800.1602" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="1287.5" y="1806.6953">getTraceId() : uint64_t</text><ellipse cx="1278.5" cy="1816.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="168" x="1287.5" y="1823.1836">doLogStackTrace() : void</text><ellipse cx="1278.5" cy="1833.1367" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="122" x="1287.5" y="1839.6719">doPrepare() : void</text><ellipse cx="1278.5" cy="1849.625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="224" x="1287.5" y="1856.1602">doPrepareForDumpTrace() : void</text><ellipse cx="1278.5" cy="1866.1133" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="317" x="1287.5" y="1872.6484">dumpTraceMeta(const std::string&amp; path) : void</text><ellipse cx="1278.5" cy="1882.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="1287.5" y="1889.1367">endRecord() : void</text><ellipse cx="1278.5" cy="1899.0898" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="1287.5" y="1905.625">reBuild() : void</text><ellipse cx="1278.5" cy="1915.5781" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="722" x="1287.5" y="1922.1133">reset(cudaStream_t s, std::function&lt;NvidiaGpuTimer::FnReturn ( )&gt; cb, const std::string_view&amp; type) : void</text><ellipse cx="1278.5" cy="1932.0664" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1124" x="1287.5" y="1938.6016">reset(cudaStream_t s, const std::string_view&amp; type, const std::initializer_list&lt;int&gt;&amp; bmnk, const std::string&amp;&amp; name_prefix, cudaDataType_t dtype, uint8_t bias) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1945.5547"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="435" x="1287.5" y="1955.0898">reset_cb(std::function&lt;NvidiaGpuTimer::FnReturn ( )&gt; cb) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1275.5" y="1962.043"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="431" x="1287.5" y="1971.5781">reset_event(cudaStream_t s, const std::string_view&amp; type) : void</text><ellipse cx="1278.5" cy="1981.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="1287.5" y="1988.0664">startRecord() : void</text></g><!--MD5=[a8ef21324060829d1fe3c39a928c448a]
class atorch.nvidia.NvidiaGpuTimer::MatmulBuilderCallback--><g id="elem_atorch.nvidia.NvidiaGpuTimer::MatmulBuilderCallback"><rect codeLine="419" fill="#F1F1F1" height="163.418" id="atorch.nvidia.NvidiaGpuTimer::MatmulBuilderCallback" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="840" x="1819.5" y="2171.5"/><ellipse cx="2097.75" cy="2187.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2100.2231,2193.6431 Q2099.6421,2193.9419 2099.0029,2194.0913 Q2098.3638,2194.2407 2097.6582,2194.2407 Q2095.1514,2194.2407 2093.8315,2192.5889 Q2092.5117,2190.937 2092.5117,2187.8159 Q2092.5117,2184.6865 2093.8315,2183.0347 Q2095.1514,2181.3828 2097.6582,2181.3828 Q2098.3638,2181.3828 2099.0112,2181.5322 Q2099.6587,2181.6816 2100.2231,2181.9805 L2100.2231,2184.7031 Q2099.5923,2184.1221 2098.9988,2183.8523 Q2098.4053,2183.5825 2097.7744,2183.5825 Q2096.4297,2183.5825 2095.7449,2184.6492 Q2095.0601,2185.7158 2095.0601,2187.8159 Q2095.0601,2189.9077 2095.7449,2190.9744 Q2096.4297,2192.041 2097.7744,2192.041 Q2098.4053,2192.041 2098.9988,2191.7712 Q2099.5923,2191.5015 2100.2231,2190.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="275" x="2118.25" y="2192.791">NvidiaGpuTimer::MatmulBuilderCallback</text><line style="stroke:#181818;stroke-width:0.5;" x1="1820.5" x2="2658.5" y1="2203.5" y2="2203.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1827.5" y="2211.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="1839.5" y="2221.0352">dtype_ : cudaDataType_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1827.5" y="2227.9883"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="1839.5" y="2237.5234">bmnk_ : std::array&lt;int, 4&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1827.5" y="2244.4766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="1839.5" y="2254.0117">name_prefix_ : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1827.5" y="2260.9648"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="1839.5" y="2270.5">bias_ : uint8_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="1820.5" x2="2658.5" y1="2277.4531" y2="2277.4531"/><ellipse cx="1830.5" cy="2288.4531" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="167" x="1839.5" y="2294.9883">MatmulBuilderCallback()</text><ellipse cx="1830.5" cy="2304.9414" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="1839.5" y="2311.4766">operator()() : NvidiaGpuTimer :: FnReturn</text><ellipse cx="1830.5" cy="2321.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="814" x="1839.5" y="2327.9648">reset(const std::initializer_list&lt;int&gt;&amp; bmnk, const std::string&amp;&amp; name_prefix, cudaDataType_t dtype, uint8_t bias) : void</text></g><!--MD5=[a65eb7d20a52d47ae3ad07e4f2b8acfe]
class atorch.constant.KernelTraceConstant--><g id="elem_atorch.constant.KernelTraceConstant"><rect codeLine="431" fill="#F1F1F1" height="80.9766" id="atorch.constant.KernelTraceConstant" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="463" x="4323" y="3897.5"/><ellipse cx="4478.25" cy="3913.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4480.7231,3919.6431 Q4480.1421,3919.9419 4479.5029,3920.0913 Q4478.8638,3920.2407 4478.1582,3920.2407 Q4475.6514,3920.2407 4474.3315,3918.5889 Q4473.0117,3916.937 4473.0117,3913.8159 Q4473.0117,3910.6865 4474.3315,3909.0347 Q4475.6514,3907.3828 4478.1582,3907.3828 Q4478.8638,3907.3828 4479.5112,3907.5322 Q4480.1587,3907.6816 4480.7231,3907.9805 L4480.7231,3910.7031 Q4480.0923,3910.1221 4479.4988,3909.8523 Q4478.9053,3909.5825 4478.2744,3909.5825 Q4476.9297,3909.5825 4476.2449,3910.6492 Q4475.5601,3911.7158 4475.5601,3913.8159 Q4475.5601,3915.9077 4476.2449,3916.9744 Q4476.9297,3918.041 4478.2744,3918.041 Q4478.9053,3918.041 4479.4988,3917.7712 Q4480.0923,3917.5015 4480.7231,3916.9204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="4498.75" y="3918.791">KernelTraceConstant</text><line style="stroke:#181818;stroke-width:0.5;" x1="4324" x2="4785" y1="3929.5" y2="3929.5"/><ellipse cx="4334" cy="3940.5" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="315" x="4343" y="3947.0352">DEFAULT_TRACE_COUNT : static constexpr int</text><ellipse cx="4334" cy="3956.9883" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="437" x="4343" y="3963.5234">DEFAULT_TRACE_DUMP_PATH : static constexpr std::string_view</text><line style="stroke:#181818;stroke-width:0.5;" x1="4324" x2="4785" y1="3970.4766" y2="3970.4766"/></g><!--MD5=[823b2172ef05b73720e19b65b16d5459]
class atorch.constant.Metrics--><g id="elem_atorch.constant.Metrics"><rect codeLine="436" fill="#F1F1F1" height="245.8594" id="atorch.constant.Metrics" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="400" x="3887.5" y="3815"/><ellipse cx="4058.75" cy="3831" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4061.2231,3837.1431 Q4060.6421,3837.4419 4060.0029,3837.5913 Q4059.3638,3837.7407 4058.6582,3837.7407 Q4056.1514,3837.7407 4054.8315,3836.0889 Q4053.5117,3834.437 4053.5117,3831.3159 Q4053.5117,3828.1865 4054.8315,3826.5347 Q4056.1514,3824.8828 4058.6582,3824.8828 Q4059.3638,3824.8828 4060.0112,3825.0322 Q4060.6587,3825.1816 4061.2231,3825.4805 L4061.2231,3828.2031 Q4060.5923,3827.6221 4059.9988,3827.3523 Q4059.4053,3827.0825 4058.7744,3827.0825 Q4057.4297,3827.0825 4056.7449,3828.1492 Q4056.0601,3829.2158 4056.0601,3831.3159 Q4056.0601,3833.4077 4056.7449,3834.4744 Q4057.4297,3835.541 4058.7744,3835.541 Q4059.4053,3835.541 4059.9988,3835.2712 Q4060.5923,3835.0015 4061.2231,3834.4204 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="49" x="4079.25" y="3836.291">Metrics</text><line style="stroke:#181818;stroke-width:0.5;" x1="3888.5" x2="4286.5" y1="3847" y2="3847"/><ellipse cx="3898.5" cy="3858" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="242" x="3907.5" y="3864.5352">AVG_LATENCY : static constexpr int</text><ellipse cx="3898.5" cy="3874.4883" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="171" x="3907.5" y="3881.0234">CAP : static constexpr int</text><ellipse cx="3898.5" cy="3890.9766" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="193" x="3907.5" y="3897.5117">COUNT : static constexpr int</text><ellipse cx="3898.5" cy="3907.4648" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="185" x="3907.5" y="3914">FLOPS : static constexpr int</text><ellipse cx="3898.5" cy="3923.9531" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="244" x="3907.5" y="3930.4883">MAX_LATENCY : static constexpr int</text><ellipse cx="3898.5" cy="3940.4414" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="257" x="3907.5" y="3946.9766">P9999_LATENCY : static constexpr int</text><ellipse cx="3898.5" cy="3956.9297" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="3907.5" y="3963.4648">P99_LATENCY : static constexpr int</text><ellipse cx="3898.5" cy="3973.418" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="3907.5" y="3979.9531">QPS : static constexpr int</text><ellipse cx="3898.5" cy="3989.9063" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="374" x="3907.5" y="3996.4414">COLL_GAUGE_PREFIX : static constexpr std::string_view</text><ellipse cx="3898.5" cy="4006.3945" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="307" x="3907.5" y="4012.9297">COLL_TYPE : static constexpr std::string_view</text><ellipse cx="3898.5" cy="4022.8828" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="363" x="3907.5" y="4029.418">MM_GAUGE_PREFIX : static constexpr std::string_view</text><ellipse cx="3898.5" cy="4039.3711" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="296" x="3907.5" y="4045.9063">MM_TYPE : static constexpr std::string_view</text><line style="stroke:#181818;stroke-width:0.5;" x1="3888.5" x2="4286.5" y1="4052.8594" y2="4052.8594"/></g><path d="M6,6 L6,31.3105 A0,0 0 0 0 6,31.3105 L196,31.3105 A0,0 0 0 0 196,31.3105 L196,24 L1059,217.2441 L196,16 L196,16 L186,6 L6,6 A0,0 0 0 0 6,6 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M186,6 L186,16 L196,16 L186,6 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="169" x="12" y="23.5684">获取 prometheus 投递 label</text><path d="M6,41.3105 L6,66.6211 A0,0 0 0 0 6,66.6211 L182,66.6211 A0,0 0 0 0 182,66.6211 L182,59.3105 L1059,233.7324 L182,51.3105 L182,51.3105 L172,41.3105 L6,41.3105 A0,0 0 0 0 6,41.3105 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M172,41.3105 L172,51.3105 L182,51.3105 L172,41.3105 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="155" x="12" y="58.8789">判断这个 event 是否 hang</text><path d="M6,76.6211 L6,101.9316 A0,0 0 0 0 6,101.9316 L185,101.9316 A0,0 0 0 0 185,101.9316 L185,94.6211 L1059,250.2207 L185,86.6211 L185,86.6211 L175,76.6211 L6,76.6211 A0,0 0 0 0 6,76.6211 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M175,76.6211 L175,86.6211 L185,86.6211 L175,76.6211 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="158" x="12" y="94.1895">判断这个 event 是否 ready</text><path d="M6,111.9316 L6,137.2422 A0,0 0 0 0 6,137.2422 L199,137.2422 A0,0 0 0 0 199,137.2422 L199,129.9316 L1059,266.709 L199,121.9316 L199,121.9316 L189,111.9316 L6,111.9316 A0,0 0 0 0 6,111.9316 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M189,111.9316 L189,121.9316 L199,121.9316 L189,111.9316 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="172" x="12" y="129.5">获取这个 event 的 trace 编号</text><path d="M6,147.2422 L6,172.5527 A0,0 0 0 0 6,172.5527 L160,172.5527 A0,0 0 0 0 160,172.5527 L160,165.2422 L1059,283.1973 L160,157.2422 L160,157.2422 L150,147.2422 L6,147.2422 A0,0 0 0 0 6,147.2422 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M150,147.2422 L150,157.2422 L160,157.2422 L150,147.2422 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="133" x="12" y="164.8105">获取这个 event 的名称</text><path d="M6,182.5527 L6,207.8633 A0,0 0 0 0 6,207.8633 L203,207.8633 A0,0 0 0 0 203,207.8633 L203,200.5527 L1059,299.6855 L203,192.5527 L203,192.5527 L193,182.5527 L6,182.5527 A0,0 0 0 0 6,182.5527 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M193,182.5527 L193,192.5527 L203,192.5527 L193,182.5527 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="176" x="12" y="200.1211">获取这个 event kernel 的种类</text><path d="M6,217.8633 L6,243.1738 A0,0 0 0 0 6,243.1738 L269,243.1738 A0,0 0 0 0 269,243.1738 L269,235.8633 L1059,316.1738 L269,227.8633 L269,227.8633 L259,217.8633 L6,217.8633 A0,0 0 0 0 6,217.8633 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M259,217.8633 L259,227.8633 L269,227.8633 L259,217.8633 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="242" x="12" y="235.4316">获取这个 kernel 的实际被调度运行的时间</text><path d="M6,253.1738 L6,278.4844 A0,0 0 0 0 6,278.4844 L191,278.4844 A0,0 0 0 0 191,278.4844 L191,271.1738 L1059,332.6621 L191,263.1738 L191,263.1738 L181,253.1738 L6,253.1738 A0,0 0 0 0 6,253.1738 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M181,253.1738 L181,263.1738 L191,263.1738 L181,253.1738 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="164" x="12" y="270.7422">获取这个 kernel 的发射时间</text><path d="M6,288.4844 L6,313.7949 A0,0 0 0 0 6,313.7949 L191,313.7949 A0,0 0 0 0 191,313.7949 L191,306.4844 L1059,349.1504 L191,298.4844 L191,298.4844 L181,288.4844 L6,288.4844 A0,0 0 0 0 6,288.4844 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M181,288.4844 L181,298.4844 L191,298.4844 L181,288.4844 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="164" x="12" y="306.0527">获取这个 kernel 的运行时长</text><path d="M6,323.7949 L6,349.1055 A0,0 0 0 0 6,349.1055 L185,349.1055 A0,0 0 0 0 185,349.1055 L185,341.7949 L1059,365.6387 L185,333.7949 L185,333.7949 L175,323.7949 L6,323.7949 A0,0 0 0 0 6,323.7949 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M175,323.7949 L175,333.7949 L185,333.7949 L175,323.7949 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="158" x="12" y="341.3633">获取这个 kernel 的 flop 数</text><path d="M6,359.1055 L6,384.416 A0,0 0 0 0 6,384.416 L469,384.416 A0,0 0 0 0 469,384.416 L469,377.1055 L1059,382.127 L469,369.1055 L469,369.1055 L459,359.1055 L6,359.1055 A0,0 0 0 0 6,359.1055 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M459,359.1055 L459,369.1055 L469,369.1055 L459,359.1055 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="442" x="12" y="376.6738">获取这个 kernel 的 trace id, 用于区分一个 timeline 中有相同名字的 kernel</text><path d="M6,394.416 L6,419.7266 A0,0 0 0 0 6,419.7266 L439,419.7266 A0,0 0 0 0 439,419.7266 L439,412.416 L1059,398.6152 L439,404.416 L439,404.416 L429,394.416 L6,394.416 A0,0 0 0 0 6,394.416 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M429,394.416 L429,404.416 L439,404.416 L429,394.416 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="412" x="12" y="411.9844">每个继承 XpuTimer 的类在启动前额外的准备，比如 reload nccl syms</text><path d="M6,429.7266 L6,470.3477 A0,0 0 0 0 6,470.3477 L363,470.3477 A0,0 0 0 0 363,470.3477 L363,454.0371 L1059,415.1035 L363,446.0371 L363,439.7266 L353,429.7266 L6,429.7266 A0,0 0 0 0 6,429.7266 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M353,429.7266 L353,439.7266 L363,439.7266 L353,429.7266 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="336" x="12" y="447.2949">每个继承 XpuTimer 的类在 dump timeline 前额外的准备</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="270" x="12" y="462.6055">比如重新对每个 stream 上记录新的 init event</text><path d="M6,480.3477 L6,520.9688 A0,0 0 0 0 6,520.9688 L402,520.9688 A0,0 0 0 0 402,520.9688 L402,504.6582 L1059,431.5918 L402,496.6582 L402,490.3477 L392,480.3477 L6,480.3477 A0,0 0 0 0 6,480.3477 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M392,480.3477 L392,490.3477 L402,490.3477 L392,480.3477 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="375" x="12" y="497.916">每个继承 XpuTimer 的类在 dump timeline 时产出的 meta 数据</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="185" x="12" y="513.2266">用于生成 timeline 时解析 trace</text><path d="M6,530.9688 L6,556.2793 A0,0 0 0 0 6,556.2793 L216,556.2793 A0,0 0 0 0 216,556.2793 L216,548.9688 L1059,448.0801 L216,540.9688 L216,540.9688 L206,530.9688 L6,530.9688 A0,0 0 0 0 6,530.9688 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M206,530.9688 L206,540.9688 L216,540.9688 L206,530.9688 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="189" x="12" y="548.5371">为每个 kernel 发射后记录 event</text><path d="M6,566.2793 L6,606.9004 A0,0 0 0 0 6,606.9004 L363,606.9004 A0,0 0 0 0 363,606.9004 L363,590.5898 L1059,464.5684 L363,582.5898 L363,576.2793 L353,566.2793 L6,566.2793 A0,0 0 0 0 6,566.2793 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M353,566.2793 L353,576.2793 L363,576.2793 L353,566.2793 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="336" x="12" y="583.8477">为每个 kernel 在 ready 后回调创建一些耗费时间片的操作</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="159" x="12" y="599.1582">比如获取名字，flop 等操作</text><path d="M6,616.9004 L6,642.2109 A0,0 0 0 0 6,642.2109 L216,642.2109 A0,0 0 0 0 216,642.2109 L216,634.9004 L1059,481.0566 L216,626.9004 L216,626.9004 L206,616.9004 L6,616.9004 A0,0 0 0 0 6,616.9004 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M206,616.9004 L206,626.9004 L216,626.9004 L206,616.9004 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="189" x="12" y="634.4688">为每个 kernel 发射前记录 event</text><g id="elem_EntryPoint"><path d="M6215,316.5 L6215,341.8105 L6414,341.8105 L6414,326.5 L6404,316.5 L6215,316.5 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M6404,316.5 L6404,326.5 L6414,326.5 L6404,316.5 " fill="#FEFFDD" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="178" x="6221" y="334.0684">Hook 功能主入口,Lazy 初始化</text></g><g id="elem_Daemon"><path d="M6217,2642.5 L6217,2667.8105 L6394,2667.8105 L6394,2652.5 L6384,2642.5 L6217,2642.5 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M6384,2642.5 L6384,2652.5 L6394,2652.5 L6384,2642.5 " fill="#FEFFDD" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="156" x="6223" y="2660.0684">xpu_daemon_server 实现</text></g><g id="elem_CythonStack"><path d="M6215,922.5 L6215,963.1211 L6678,963.1211 L6678,932.5 L6668,922.5 L6215,922.5 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M6668,922.5 L6668,932.5 L6678,932.5 L6668,922.5 " fill="#FEFFDD" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="442" x="6221" y="940.0684">进程内 python 打栈实现, 使用 dlopen 打开 libpy_xpu_timer_callstack.so</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="315" x="6221" y="955.3789">具体实现在 py_xpu_timer/src/py_xpu_callstack.cc</text></g><!--MD5=[4c5fb20de283d3daa879ad684e409e2c]
reverse link atorch.server.AsyncJob to atorch.server.StringStacktraceJob--><g id="link_atorch.server.AsyncJob_atorch.server.StringStacktraceJob"><path codeLine="459" d="M5381.49,2741.29 C5362.91,2755.58 5342.51,2768.75 5321.5,2778 C5298.76,2788.01 4901.13,2828.75 4878.5,2839 C4848.21,2852.73 4819.44,2874.58 4795.35,2896.47 " fill="none" id="atorch.server.AsyncJob-backto-atorch.server.StringStacktraceJob" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5377.35,2735.63,5397.31,2728.51,5386.15,2746.52,5377.35,2735.63" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[990016df4b55bb0a5b2a7338dcefc6d2]
reverse link atorch.LibraryLoader to atorch.nvidia.FaParser--><g id="link_atorch.LibraryLoader_atorch.nvidia.FaParser"><path codeLine="462" d="M1022.89,1025.19 C987.22,1081.33 939.79,1158.2 901.5,1228 C839.21,1341.57 774.87,1477.73 737.33,1559.42 " fill="none" id="atorch.LibraryLoader-backto-atorch.nvidia.FaParser" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1017.13,1021.19,1033.79,1008.1,1028.94,1028.72,1017.13,1021.19" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a69116263b8b7c98febf8bf71c6d0b5f]
reverse link atorch.LibraryLoader to atorch.nvidia.NcclParser--><g id="link_atorch.LibraryLoader_atorch.nvidia.NcclParser"><path codeLine="465" d="M1075.5,1028.46 C1075.5,1170.84 1075.5,1454.88 1075.5,1575.61 " fill="none" id="atorch.LibraryLoader-backto-atorch.nvidia.NcclParser" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1068.5,1028.11,1075.5,1008.11,1082.5,1028.11,1068.5,1028.11" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[1001e0a28e1fcb1f4f154be576626538]
reverse link atorch.LibraryLoader to atorch.stack_util.PyStackInProcess--><g id="link_atorch.LibraryLoader_atorch.stack_util.PyStackInProcess"><path codeLine="468" d="M1128.3,1024.47 C1168.06,1077.35 1227.74,1142.25 1298.5,1173 C1425.81,1228.33 3670.42,1169.94 3796.5,1228 C3931.23,1290.04 4037.2,1428.66 4098.8,1526.15 " fill="none" id="atorch.LibraryLoader-backto-atorch.stack_util.PyStackInProcess" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1122.51,1028.41,1116.36,1008.14,1133.81,1020.15,1122.51,1028.41" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[31ea9f15c4e88d411a0e91402b36b9eb]
reverse link atorch.XpuTimer to atorch.nvidia.NvidiaGpuTimer--><g id="link_atorch.XpuTimer_atorch.nvidia.NvidiaGpuTimer"><path codeLine="471" d="M1243.66,513.28 C1249.47,576.54 1255.9,647.87 1261.5,713 C1270.28,815.18 1251.59,1081.81 1298.5,1173 C1316.09,1207.2 1337.45,1239.87 1361.4,1270.88 " fill="none" id="atorch.XpuTimer-backto-atorch.nvidia.NvidiaGpuTimer" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1236.66,513.59,1241.79,493.04,1250.6,512.31,1236.66,513.59" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[159f90bc86ca91be9ecd81c183515406]
reverse link atorch.BvarMetrics to atorch.server.ClientStub--><g id="link_atorch.BvarMetrics_atorch.server.ClientStub"><path codeLine="479" d="M5104.33,2446.09 C5027.4,2475.29 4949.87,2504.71 4878.32,2531.87 " fill="none" id="atorch.BvarMetrics-backto-atorch.server.ClientStub" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="5116.68,2441.41,5109.6511,2439.7994,5105.4609,2445.6682,5112.4899,2447.2788,5116.68,2441.41" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5246fbb340e136c760c9a1a164408792]
reverse link atorch.BvarMetrics to atorch.TimeoutCounter--><g id="link_atorch.BvarMetrics_atorch.TimeoutCounter"><path codeLine="482" d="M5764.07,2460.83 C5798.87,2507.7 5833.3,2554.06 5859.7,2589.62 " fill="none" id="atorch.BvarMetrics-backto-atorch.TimeoutCounter" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="5756.17,2450.19,5756.5304,2457.3921,5763.3171,2459.8294,5762.9567,2452.6273,5756.17,2450.19" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[c5f4d2b091b4942c19f724bad4673128]
reverse link atorch.GpuTimerManager to atorch.util.BlockingDeque--><g id="link_atorch.GpuTimerManager_atorch.util.BlockingDeque"><path codeLine="485" d="M3943.49,1120.25 C3915.4,1153.07 3890.51,1189.32 3873.5,1228 C3846.14,1290.2 3859.42,2392.96 3822.5,2450 C3801.44,2482.54 3765.34,2456.32 3744.5,2489 C3668.24,2608.59 3735.5,2666.17 3735.5,2808 C3735.5,2808 3735.5,2808 3735.5,3939 C3735.5,4009 3760.06,4047.76 3707.5,4094 C3694.39,4105.54 3567.05,4096.4 3550.5,4102 C3466.34,4130.48 3384.08,4189.52 3326.56,4237.44 " fill="none" id="atorch.GpuTimerManager-backto-atorch.util.BlockingDeque" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="3952.31,1110.17,3945.3492,1112.0536,3944.4107,1119.2034,3951.3715,1117.3198,3952.31,1110.17" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[c65b039d61f57449fe7942be3323180f]
reverse link atorch.GpuTimerManager to atorch.server.ClientStub--><g id="link_atorch.GpuTimerManager_atorch.server.ClientStub"><path codeLine="488" d="M4377.76,952.38 C4572.55,972.85 4846.92,1036.54 4983.5,1228 C5032.99,1297.38 4997.34,1910.91 4983.5,1995 C4948.82,2205.66 4954.88,2277.21 4829.5,2450 C4807.78,2479.93 4780.4,2507.41 4751.41,2531.84 " fill="none" id="atorch.GpuTimerManager-backto-atorch.server.ClientStub" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4364.76,951.06,4370.3252,955.6457,4376.6986,952.2723,4371.1334,947.6866,4364.76,951.06" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[c436e3a542e43ea0254f0c17f112b012]
reverse link atorch.GpuTimerManager to atorch.GpuTimerManager--><g id="link_atorch.GpuTimerManager_atorch.GpuTimerManager"><path codeLine="491" d="M4376.58,908.27 C4390.86,916.35 4399.5,927.93 4399.5,943 C4399.5,961.92 4385.89,975.33 4364.62,983.23 " fill="none" id="atorch.GpuTimerManager-backto-atorch.GpuTimerManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="4364.62,902.77,4368.4019,908.9098,4375.524,907.7803,4371.7421,901.6405,4364.62,902.77" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2e3560fc273f47311247fb1c87e54968]
reverse link atorch.GpuTimerManager to atorch.MetricsManager--><g id="link_atorch.GpuTimerManager_atorch.MetricsManager"><path codeLine="494" d="M4377.49,989.62 C4554.33,1031.31 4806.58,1101.94 5011.5,1203 C5185.02,1288.57 5362.59,1422.78 5478.86,1518.28 " fill="none" id="atorch.GpuTimerManager-backto-atorch.MetricsManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="4364.62,986.6,4369.547,991.8654,4376.3024,989.3426,4371.3754,984.0772,4364.62,986.6" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[1c21c3be7c274961277b2b11a3d45ba9]
reverse link atorch.GpuTimerManager to atorch.stack_util.PyStackInProcess--><g id="link_atorch.GpuTimerManager_atorch.stack_util.PyStackInProcess"><path codeLine="497" d="M4158.5,1186.1 C4158.5,1302.38 4158.5,1435.73 4158.5,1526.08 " fill="none" id="atorch.GpuTimerManager-backto-atorch.stack_util.PyStackInProcess" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="4158.5,1173.09,4154.5,1179.09,4158.5,1185.09,4162.5,1179.09,4158.5,1173.09" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2da77ebc5b6399afd8ca283704f2be48]
reverse link atorch.GpuTimerManager to atorch.util.TimerPool--><g id="link_atorch.GpuTimerManager_atorch.util.TimerPool"><path codeLine="500" d="M3942.76,1092.85 C3901.76,1131.83 3864.28,1177.34 3840.5,1228 C3826.07,1258.75 3815.81,2422.06 3796.5,2450 C3771.01,2486.87 3728.61,2451.87 3703.5,2489 C3624.06,2606.45 3698.5,2666.2 3698.5,2808 C3698.5,2808 3698.5,2808 3698.5,3939 C3698.5,4182.16 2822.22,3972.37 2616.5,4102 C2562.98,4135.72 2524.85,4197.98 2501.85,4245.62 " fill="none" id="atorch.GpuTimerManager-backto-atorch.util.TimerPool" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="3952.4,1083.86,3945.2838,1085.0263,3943.6234,1092.0436,3950.7396,1090.8773,3952.4,1083.86" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f9bf3c622e727deac07bc3f958b4f050]
reverse link atorch.server.HostingServiceImpl to atorch.server.LocalPrometheusService--><g id="link_atorch.server.HostingServiceImpl_atorch.server.LocalPrometheusService"><path codeLine="503" d="M4647.44,3398.53 C4635.66,3406.54 4623.93,3414.43 4612.5,3422 C4597.64,3431.84 4582.24,3441.87 4566.67,3451.89 " fill="none" id="atorch.server.HostingServiceImpl-backto-atorch.server.LocalPrometheusService" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="4658.26,3391.15,4651.0494,3391.2314,4648.3511,3397.9186,4655.5618,3397.8373,4658.26,3391.15" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[5548edb01097c3fe2d8b1319c79a5c79]
reverse link atorch.server.HostingServiceImpl to atorch.util.detail.ShmSwitch--><g id="link_atorch.server.HostingServiceImpl_atorch.util.detail.ShmSwitch"><path codeLine="506" d="M4890.98,3402.85 C5006.39,3602.45 5230.52,3990.07 5344.8,4187.72 " fill="none" id="atorch.server.HostingServiceImpl-backto-atorch.util.detail.ShmSwitch" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4884.38,3391.44,4883.9231,3398.6366,4890.3904,3401.8263,4890.8473,3394.6297,4884.38,3391.44" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6c6e19cacf3e75fae847079563ae2ce8]
reverse link atorch.KernelTraceManager to atorch.KernelTrace--><g id="link_atorch.KernelTraceManager_atorch.KernelTrace"><path codeLine="509" d="M4705.5,1810.41 C4705.5,1932.77 4705.5,2089.35 4705.5,2179.4 " fill="none" id="atorch.KernelTraceManager-backto-atorch.KernelTrace" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4705.5,1797.18,4701.5,1803.18,4705.5,1809.18,4709.5,1803.18,4705.5,1797.18" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[787374efefeb955381f1a9e0aaa9c517]
reverse link atorch.KernelTraceManager to atorch.KernelTraceManager--><g id="link_atorch.KernelTraceManager_atorch.KernelTraceManager"><path codeLine="512" d="M4959.3,1582.72 C4974.13,1594.78 4983,1611.54 4983,1633 C4983,1659.41 4969.56,1678.71 4948.11,1690.88 " fill="none" id="atorch.KernelTraceManager-backto-atorch.KernelTraceManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="4948.11,1575.12,4950.8286,1581.799,4958.0395,1581.8583,4955.3209,1575.1793,4948.11,1575.12" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[448a09131fb770001b890d5b0adf49c2]
reverse link atorch.KernelTraceManager to atorch.util.detail.ShmSwitch--><g id="link_atorch.KernelTraceManager_atorch.util.detail.ShmSwitch"><path codeLine="515" d="M4594.24,1807.77 C4550.75,1869.87 4498.19,1938.41 4443.5,1995 C4214.83,2231.59 4132.08,2265.71 3859.5,2450 C3830.96,2469.3 3810.6,2459.68 3792.5,2489 C3717.87,2609.87 3772.5,2665.94 3772.5,2808 C3772.5,2808 3772.5,2808 3772.5,3939 C3772.5,4017.4 3802.49,4047.8 3871.5,4085 C3931.46,4117.32 5032.36,4082.09 5097.5,4102 C5157.12,4120.22 5216.06,4153.33 5266.69,4187.86 " fill="none" id="atorch.KernelTraceManager-backto-atorch.util.detail.ShmSwitch" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4601.7,1797.07,4594.9892,1799.7091,4594.8441,1806.9187,4601.555,1804.2796,4601.7,1797.07" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[b00773596cf97915c7648d9034171fe1]
reverse link atorch.server.LocalPrometheusService to atorch.constant.Metrics--><g id="link_atorch.server.LocalPrometheusService_atorch.constant.Metrics"><path codeLine="518" d="M4231.92,3741.89 C4213.91,3766.22 4195.44,3791.17 4177.99,3814.75 " fill="none" id="atorch.server.LocalPrometheusService-backto-atorch.constant.Metrics" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4239.88,3731.13,4233.0949,3733.5718,4232.7392,3740.7741,4239.5243,3738.3323,4239.88,3731.13" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[db7228e41dbb6a283d9a7164a2f74bbf]
reverse link atorch.MetricsManager to atorch.BvarMetrics--><g id="link_atorch.MetricsManager_atorch.BvarMetrics"><path codeLine="521" d="M5610.5,1760.82 C5610.5,1845.76 5610.5,1959.27 5610.5,2055.77 " fill="none" id="atorch.MetricsManager-backto-atorch.BvarMetrics" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5610.5,1747.71,5606.5,1753.71,5610.5,1759.71,5614.5,1753.71,5610.5,1747.71" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[82fdd52b9dc5bfcb3ea8713c385c3911]
reverse link atorch.nvidia.NvidiaGpuTimer to atorch.nvidia.EventStartTimeHelper--><g id="link_atorch.nvidia.NvidiaGpuTimer_atorch.nvidia.EventStartTimeHelper"><path codeLine="524" d="M1696.83,2007.54 C1671.31,2072.99 1647.37,2134.38 1629.86,2179.28 " fill="none" id="atorch.nvidia.NvidiaGpuTimer-backto-atorch.nvidia.EventStartTimeHelper" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1701.61,1995.28,1695.7021,1999.4149,1697.2467,2006.4586,1703.1545,2002.3238,1701.61,1995.28" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[41d6189de02db269ec5e7e138cff8efe]
reverse link atorch.util.detail.InterProcessBarrierImpl to atorch.util.detail.InterProcessBarrierImpl::Inner--><g id="link_atorch.util.detail.InterProcessBarrierImpl_atorch.util.detail.InterProcessBarrierImpl::Inner"><path codeLine="533" d="M4844.5,4374.87 C4844.5,4424 4844.5,4491.23 4844.5,4535.95 " fill="none" id="atorch.util.detail.InterProcessBarrierImpl-backto-atorch.util.detail.InterProcessBarrierImpl::Inner" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="4844.5" cy="4367.6" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="4844.5" x2="4844.5" y1="4375.6" y2="4359.6"/><line style="stroke:#181818;stroke-width:1.0;" x1="4836.5" x2="4852.5" y1="4367.6" y2="4367.6"/></g><!--MD5=[5c0313b2b090e796d760608d5cd37f26]
reverse link atorch.nvidia.NvidiaGpuTimer to atorch.nvidia.NvidiaGpuTimer::MatmulBuilderCallback--><g id="link_atorch.nvidia.NvidiaGpuTimer_atorch.nvidia.NvidiaGpuTimer::MatmulBuilderCallback"><path codeLine="536" d="M1918.72,2008.41 C1922.15,2014.4 1925.75,2020.27 1929.5,2026 C1968.26,2085.21 2028.25,2134.2 2085.16,2171.25 " fill="none" id="atorch.nvidia.NvidiaGpuTimer-backto-atorch.nvidia.NvidiaGpuTimer::MatmulBuilderCallback" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="1915.2736" cy="2002.1362" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1919.1173" x2="1911.43" y1="2009.1523" y2="1995.12"/><line style="stroke:#181818;stroke-width:1.0;" x1="1908.2575" x2="1922.2898" y1="2005.9798" y2="1998.2925"/></g><!--MD5=[71c5feff86251db2bb9b10d0be3194d3]
reverse link atorch.GpuTimerManager to atorch.KernelTraceManager--><g id="link_atorch.GpuTimerManager_atorch.KernelTraceManager"><path codeLine="73" d="M4373.59,1148.29 C4398,1174.37 4421.85,1201.3 4443.5,1228 C4504.44,1303.16 4563.83,1392.95 4610.62,1468.77 " fill="none" id="atorch.GpuTimerManager-backto-atorch.KernelTraceManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4364.57,1138.72,4365.7694,1145.8307,4372.7944,1147.4584,4371.595,1140.3477,4364.57,1138.72" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[382e64c9f8368217487bc0fe6f6f4c6a]
reverse link atorch.GpuTimerManager to atorch.nvidia.NvidiaGpuTimer--><g id="link_atorch.GpuTimerManager_atorch.nvidia.NvidiaGpuTimer"><path codeLine="74" d="M3932.18,950.37 C3594.69,966.62 2944.7,1024.2 2435.5,1228 C2403.98,1240.61 2372.46,1255.12 2341.28,1270.97 " fill="none" id="atorch.GpuTimerManager-backto-atorch.nvidia.NvidiaGpuTimer" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="3931.92,943.37,3952.22,949.43,3932.57,957.36,3931.92,943.37" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="218" x="2479.5" y="1216.5684">template class, T=NvidiaGpuTimer</text></g><!--MD5=[647b3148cbfc2f2ab9d03fd1d2ffc68c]
reverse link atorch.util.detail.ShmSwitch to atorch.util.ShmType--><g id="link_atorch.util.detail.ShmSwitch_atorch.util.ShmType"><path codeLine="75" d="M5675.39,4443.15 C5721.64,4466.49 5768.24,4490.01 5809.73,4510.95 " fill="none" id="atorch.util.detail.ShmSwitch-backto-atorch.util.ShmType" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5672.05,4449.31,5657.35,4434.05,5678.36,4436.81,5672.05,4449.31" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="293" x="5749.5" y="4477.5684">template class, T=atorch.util.detail.ShmSwitch</text></g><!--MD5=[f8c121dbcbf5c9b891a0a7354e25afa8]
reverse link atorch.constant.KernelTraceConstant to atorch.util.EnvVarRegistry--><g id="link_atorch.constant.KernelTraceConstant_atorch.util.EnvVarRegistry"><path codeLine="76" d="M4493.77,3981.51 C4444.91,4013.98 4373.41,4057.66 4305.5,4085 C4275.4,4097.12 4264.51,4089.66 4234.5,4102 C4178.46,4125.04 4120.9,4156.44 4069.32,4187.86 " fill="none" id="atorch.constant.KernelTraceConstant-backto-atorch.util.EnvVarRegistry" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="4498.14,3978.6,4488.4327,3980.2641,4493.9797,3981.3735,4492.8703,3986.9205,4498.14,3978.6" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[04507879c1fca80978e2e0c3d49fa341]
reverse link atorch.server.MainServer to atorch.server.HostingServiceImpl--><g id="link_atorch.server.MainServer_atorch.server.HostingServiceImpl"><path codeLine="77" d="M5053.07,3108.62 C5028.08,3126.39 5002.72,3144.44 4978.35,3161.77 " fill="none" id="atorch.server.MainServer-backto-atorch.server.HostingServiceImpl" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="5063.75,3101.02,5056.5422,3101.2378,5053.971,3107.9749,5061.1788,3107.7571,5063.75,3101.02" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d18f5aa5f5df05649c71d22eb4c61acf]
reverse link atorch.server.StringStacktraceJob to atorch.server.HostingServiceImpl--><g id="link_atorch.server.StringStacktraceJob_atorch.server.HostingServiceImpl"><path codeLine="78" d="M4751.43,3048.57 C4761.59,3082.96 4773.75,3124.11 4784.91,3161.86 " fill="none" id="atorch.server.StringStacktraceJob-backto-atorch.server.HostingServiceImpl" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="4749.94,3043.55,4748.6468,3053.3136,4751.3531,3048.3461,4756.3206,3051.0525,4749.94,3043.55" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a8fb75573b943720bf6e3be545020bca]
reverse link atorch.GpuTimerManager to atorch.nvidia.InterceptManager--><g id="link_atorch.GpuTimerManager_atorch.nvidia.InterceptManager"><path codeLine="79" d="M3941.2,1087.47 C3738,1221.64 3440.08,1418.35 3263.46,1534.96 " fill="none" id="atorch.GpuTimerManager-backto-atorch.nvidia.InterceptManager" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="3952.32,1080.13,3945.109,1080.097,3942.3051,1086.7407,3949.5161,1086.7736,3952.32,1080.13" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d8d8edfc1fd77f257a48f6d18ad41a9b]
link atorch.XpuTimer to atorch.LibraryLoader--><!--MD5=[664dc6bbf6ff06e8b67b573db6b567e8]
link atorch.XpuTimer to atorch.PyStackTrace--><!--MD5=[a6633e165f04e7718fdf9d7498038999]
link EntryPoint to atorch.GpuTimerManager--><g id="link_EntryPoint_atorch.GpuTimerManager"><path codeLine="85" d="M6314.3,341.76 C6312.8,389.36 6300.35,569.11 6198.5,652 C5920.26,878.44 4825.86,928.07 4364.92,938.95 " fill="none" id="EntryPoint-atorch.GpuTimerManager" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/></g><!--MD5=[ce462289ba8348669a8b1c7684873936]
link Daemon to atorch.server.MainServer--><g id="link_Daemon_atorch.server.MainServer"><path codeLine="88" d="M6298.95,2667.65 C6284.39,2692.36 6246.79,2750.07 6198.5,2778 C6016.65,2883.19 5786.24,2931.23 5597.65,2952.83 " fill="none" id="Daemon-atorch.server.MainServer" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/></g><!--MD5=[c361083b564dd78c7b8a1fdf504c36a2]
link CythonStack to atorch.stack_util.PyStackInProcess--><g id="link_CythonStack_atorch.stack_util.PyStackInProcess"><path codeLine="92" d="M6436.51,963.69 C6408.06,1017.23 6320.76,1165.16 6198.5,1220 C6176.11,1230.04 4453.15,1216.44 4431.5,1228 C4313.9,1290.81 4237.67,1429.25 4196.42,1526.49 " fill="none" id="CythonStack-atorch.stack_util.PyStackInProcess" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/></g><!--MD5=[bd0723acd920c7a543de13793f6b9afc]
@startuml





/' Objects '/

namespace atorch {
	class BvarMetrics {
		+BvarMetrics()
		+BvarMetrics(BvarMetrics&& other)
		+BvarMetrics(const std::string& name, const std::string_view& type, const uint64_t flop, Labels label, std::shared_ptr<server::ClientStub> stub)
		+~BvarMetrics()
		+isTimeout(int count) : bool
		-sync_ : bool
		-alive_counter_ : int
		-zero_qps_counter_ : int
		-{static} expose_bvar_ : static bool
		-{static} push_interval_ : static std::chrono::seconds
		-{static} coll_bvar_window_size_ : static time_t
		-{static} mm_bvar_window_size_ : static time_t
		-start_ : std::chrono::steady_clock::time_point
		-client_stub_ : std::shared_ptr<server::ClientStub>
		-name_ : std::string
		-timeout_counter_ : std::unique_ptr<TimeoutCounter>
		-bv_ : std::unique_ptr<bvar::LatencyRecorder>
		-flop_ : uint64_t
		+pushMetrics(uint64_t dur_in_us) : void
		+setSync(bool sync) : void
		+{static} setUp() : void
	}

	class GpuTimerManager <template<typename T>> {
		-GpuTimerManager()
		-~GpuTimerManager()
		-working_queue_ : BlockingDeque<T>
		-getMetrics(T* work_item) : BvarMetrics&
		+{static} getInstance() : GpuTimerManager&
		-metrics_manager_ : MetricsManager*
		+getEvent() : T*
		-event_pool_ : TimerPool<T>
		-daemon_ : bp::child*
		-{static} instance_ : inline static GpuTimerManager*
		-{static} init_flag_ : inline static std::once_flag
		-dump_stack_count_ : int
		-py_stack_util_ : stack_util::PyStackInProcess*
		-dump_stub_ : std::shared_ptr<ClientStub>
		-daemon_addr_ : std::string
		-event_poller_ : std::thread
		+intercept_manager : typename T::InnerInterceptManager
		-deregisterMetrics() : void
		-doHang() : void
		-doWork() : void
		-{static} initSingleton() : void
		+recordEvent(T* event) : void
		-startDaemon(int port) : void
		-startWork() : void
		-stopWork() : void
	}

	class KernelTraceManager {
		-KernelTraceManager()
		-~KernelTraceManager()
		+{static} getInstance() : KernelTraceManager&
		-has_do_prepare_for_dump_ : bool
		-has_trigger_trace_ : bool
		+prepareDump() : bool
		+pushTrace(T* work_item) : bool
		+triggerTrace() : bool
		-{static} instance_ : inline static KernelTraceManager*
		-{static} init_flag_ : inline static std::once_flag
		-switch_ : std::unique_ptr<util::ShmSwitch>
		-kernel_trace_ : std::vector<KernelTrace>
		-curr_ : uint32_t
		-kernel_trace_count_ : uint32_t
		+dumpKernelTrace(stack_util::PyStackInProcess* py_stack_util) : void
		-{static} initSingleton() : void
		-reset(const std::string& barrier_name) : void
	}

	class LibraryLoader {
		+LibraryLoader(const std::string& library_path)
		#can_use_ : bool
		#library_path_ : const std::string
		#LoadLibrary() : void
		#handle_ : void*
	}

	class MetricsManager {
		+MetricsManager()
		+~MetricsManager()
		+GetOrCreateMetrics(const std::string& name, const std::string_view& type, const uint64_t flop, Labels label, std::shared_ptr<server::ClientStub> stub) : BvarMetrics&
		-deregister_timeout_count_ : int
		-should_run_ : std::atomic<bool>
		-mu_ : std::mutex
		-deregister_thread_ : std::thread
		-metrics_ : std::unordered_map<std::string, BvarMetrics*>
		+DeleteMetrics(bool exit) : void
		-checkMetrics() : void
		+deregisterMetrics() : void
	}

	class TimeoutCounter {
		+TimeoutCounter()
		-counter_ : std::unique_ptr<bvar::Adder<uint64_t>>
		-timout_counter_ : std::unique_ptr<bvar::Window<bvar::Adder<uint64_t>>>
		+ThroughtPut() : uint64_t
		+Add() : void
	}

	abstract class XpuTimer {
		+{abstract} getExtraLabels() : Labels
		+{abstract} isHang(uint64_t timeout) : bool
		+{abstract} isReady() : bool
		+{abstract} getTraceCode() : int
		+{abstract} getName() : std::string
		+{abstract} getType() : std::string_view&
		+{abstract} getExecuteTimeStamp() : time_t
		+{abstract} getLaunchTimeStamp() : time_t
		+{abstract} getDuration() : uint64_t
		+{abstract} getFlop() : uint64_t
		+{abstract} getTraceId() : uint64_t
		+{static} doPrepare() : void
		+{static} doPrepareForDumpTrace() : void
		+{static} dumpTraceMeta(const std::string& path) : void
		+{abstract} endRecord() : void
		+{abstract} reBuild() : void
		+{abstract} startRecord() : void
	}

	class KernelTrace {
		+kernel_type : int
		+trace_code : int
		+execute_timestamp : time_t
		+delay : uint32_t
		+dur : uint32_t
		+trace_id : uint64_t
	}

	class PyStackTrace {
		+line : int
		+filename : std::string
		+function_name : std::string
	}

	namespace util {
		class BlockingDeque <template<typename T>> {
			+pop(std::function<bool ( T* )> is_hang, std::function<bool ( T* )> is_ready) : T*
			-mutex_ : mutable std::mutex
			-cond_var_ : std::condition_variable
			-deque_ : std::deque<T*>
			+printHangName(std::vector<std::string>* hang_items) : void
			+push(T* valuePtr) : void
		}

		class EnvVarRegistry {
			+{static} GetEnvVar(const std::string& name) : T
			-{static} getDefault() : T
			-{static} getEnvInner(std::string env_name, bool* has_env) : T
			+{static} convert_to_variant(const std::string_view& sv) : VarType
			+{static} convert_to_variant(const char* s) : VarType
			+{static} convert_to_variant(const T& val) : VarType
			-{static} GetPtree() : boost::property_tree::ptree&
			+{static} BOOL_DEFAULT_VALUE : static constexpr bool
			+{static} INT_DEFAULT_VALUE : static constexpr int
			+{static} STRING_DEFAULT_VALUE : static constexpr std::string_view
			-{static} GetRegistry() : std::unordered_map<std::string , VarType>&
			+{static} RegisterEnvVar(const std::string& name, variant<int, bool, std::string> default_value) : void
		}

		class ScopeGuard {
			+ScopeGuard(std::function<void ( )> cb)
			-function<void()
			+~ScopeGuard()
		}

		class ShmType <template<typename T>> {
			+ShmType(int local_world_size, int local_rank, bool main)
			+~ShmType()
			+getObj() : T*
			-obj_ : T*
			-shm_area_ : bip::managed_shared_memory*
			-shm_name_ : std::string
		}

		class TimerPool <template<typename T>> {
			+TimerPool()
			+getObject() : T*
			-pool_ : std::deque<T*>
			-mutex_ : std::mutex
			+returnObject(T* obj) : void
		}

		namespace detail {
			class InterProcessBarrierImpl {
				+InterProcessBarrierImpl(std::string name, int world_size, int rank)
				+~InterProcessBarrierImpl()
				+name_ : std::string
			}

			class InterProcessBarrierImpl::Inner {
				+Inner(bool val)
				+val : bool
				+reset(bool value) : void
			}

			class ShmSwitch {
				+reset_flag : bool
				+dump_path : char
				+start_dump : int
				+timestamp : int64_t
				+{static} BarrierName : static constexpr std::string_view
				+{static} ObjName : static constexpr std::string_view
				+{static} ShmName : static constexpr std::string_view
				+dump_count : uint32_t
				+dump_path_length : uint32_t
				+reset() : void
				+reset(const std::string& path, uint32_t count, int64_t stamp) : void
				+reset(const std::string& path, uint32_t count, int64_t stamp, bool reset_signal) : void
			}
		}

		namespace config {
			class GlobalConfig {
				+{static} debug_mode : static bool
				+{static} enable : static bool
				+{static} ip : static std::string
				+{static} job_name : static std::string
				+{static} pod_name : static std::string
				+{static} rank_str : static std::string
				+{static} all_devices : static std::vector<uint64_t>
				+{static} local_rank : static uint32_t
				+{static} local_world_size : static uint32_t
				+{static} rank : static uint32_t
				+{static} world_size : static uint32_t
			}
		}
	}

	namespace stack_util {
		class PyStackInProcess {
			+PyStackInProcess(const std::string& library_path)
			+getPyStack() : PyStack
			-get_py_stack_fn_ : PyStack (* ) ( )
			+shouldDump(uint64_t count) : bool
			-stack_maps_ : std::unordered_map<std::string, PyStack>
			-dump_count_ : uint64_t
			-LoadFn() : void
			+dumpPyStack(const std::string& path, int rank) : void
			+insertPyStack(const std::string& kernel_name) : void
			+insertPyStack(const std::string& kernel_name, const PyStack&& stack) : void
		}
	}

	namespace server {
		abstract class AsyncJob {
			+~AsyncJob()
			+cntl : brpc::Controller*
			+done : google::protobuf::Closure*
			+{abstract} run() : void
			+run_and_delete() : void
			+{static} RunServerJob(void* args) : void*
		}

		class ClientStub {
			+ClientStub(std::string endpoint)
			-stub_ : HostingService_Stub*
			-channel_ : brpc::Channel*
			-options_ : brpc::ChannelOptions*
			-{static} HandleDeregisterPrometheusResponse(brpc::Controller* cntl, RegisterPrometheusResponse* response) : void
			-{static} HandleDumpResponse(brpc::Controller* cntl, StacktraceResponse* response) : void
			-{static} HandlePushPrometheusResponse(brpc::Controller* cntl, google::protobuf::Empty* response) : void
			-{static} HandleRegisterPrometheusResponse(brpc::Controller* cntl, RegisterPrometheusResponse* response) : void
			+pushPrometheusMetrics(bool sync, const std::string& name, int local_rank, uint64_t qps, uint64_t avg_latency, uint64_t max_latency, uint64_t p99_latency, uint64_t p9999_latency, double flops, uint64_t count) : void
			+requestDeRegisterPrometheus(bool sync, const std::string& name, int rank, int local_rank) : void
			+requestDump(bool sync, int pid, int rank, int world_size, const std::string& dump_path, const std::vector<std::string>& hang_kernel) : void
			+requestRegisterPrometheus(bool sync, const std::string& name, const std::string& gauge_name, int rank, int local_rank, const std::map<std::string, std::string>& labels) : void
		}

		class HostingServiceImpl {
			+HostingServiceImpl(int local_world_size)
			-local_world_size_ : int
			-rank_ : int
			-switch_ : std::unique_ptr<util::ShmSwitch>
			-mus_ : std::vector<std::unique_ptr<butil::Mutex>>
			-prometheus_services_ : std::vector<std::unordered_map<std::string, LocalPrometheusService*>>
			+DeRegisterPrometheus(google::protobuf::RpcController* cntl_base, const DeRegisterPrometheusRequest* request, RegisterPrometheusResponse* response, google::protobuf::Closure* done) : void
			+DumpKernelTrace(google::protobuf::RpcController* cntl_base, const DumpKernelTraceRequest* request, DumpKernelTraceResponse* response, google::protobuf::Closure* done) : void
			+DumpStringStacktrace(google::protobuf::RpcController* cntl_base, const StacktraceRequest* request, StacktraceResponse* response, google::protobuf::Closure* done) : void
			+PushPrometheus(google::protobuf::RpcController* cntl_base, const BrpcMetrics* request, google::protobuf::Empty* response, google::protobuf::Closure* done) : void
			+RegisterPrometheus(google::protobuf::RpcController* cntl_base, const RegisterPrometheusRequest* request, RegisterPrometheusResponse* response, google::protobuf::Closure* done) : void
		}

		class LocalPrometheusService {
			+LocalPrometheusService(const std::string& gauge_prefix, const std::string& kernel_name, const std::map<std::string, std::string>& label, int rank)
			+LocalPrometheusService(LocalPrometheusService&& other)
			+~LocalPrometheusService()
			-gauges_ : array<Gauge_t, constant::Metrics::CAP>
			-rank_ : int
			-{static} mu_ : static butil::Mutex
			-{static} exposer_ : static prometheus::Exposer*
			-{static} registry_ : static std::shared_ptr<prometheus::Registry>
			-{static} all_familys_ : static std::unordered_map<std::string, Family_t_Array>
			-{static} all_gauges_ : static std::vector<Gauge_t_MapArray>
			-gauge_prefix_ : std::string
			-kernel_name_ : std::string
			+push(const BrpcMetrics* metrics) : void
			+{static} setUp(int port, int local_world_size) : void
		}

		class MainServer {
			+MainServer(const std::string& endpoint, int thread_num, int prometheus_port, int local_world_size)
			-server_ : brpc::Server
			-options_ : brpc::ServerOptions
			-local_world_size_ : int
			-thread_num_ : int
			+{static} DUMMY_SERVER : static constexpr std::string_view
			+{static} HOSTING_SERVICE : static constexpr std::string_view
			+{static} LOCAL_RANK_0_SERVER : static constexpr std::string_view
			-endpoint_ : std::string
			-services_ : std::unordered_map<std::string_view, google::protobuf::Service*>
			-addService(const std::string_view& service_name) : void
			+join() : void
			+start(const std::string_view& server_type) : void
		}

		class StringStacktraceJob {
			-~StringStacktraceJob()
			+response : StacktraceResponse*
			-stderr_buf : butil::IOBuf
			-stdout_buf : butil::IOBuf
			+request : const StacktraceRequest*
			+run() : void
		}
	}

	namespace nvidia {
		class EventStartTimeHelper {
			+EventStartTimeHelper(cudaStream_t s)
			-start_event_ : cudaEvent_t
			-stream_ : cudaStream_t
			-cpu_time_ : time_t
			+getTime(cudaEvent_t kernel_launch_start) : time_t
			+reset() : void
		}

		class FaParser {
			+FaParser(const std::string& library_path)
			+getFaBwdShape(void**) : std::vector<uint64_t>
			+getFaFwdShape(void**) : std::vector<uint64_t>
			-get_bwd_shape_ : vector<uint64_t>(* ) ( void** )
			-get_fwd_shape_ : vector<uint64_t>(* ) ( void** )
			-LoadFn() : void
		}

		class InterceptManager {
			-FnReturn()>handleFa ( void** args, const std::string& name, const std::string& type)
			-FnReturn()>handleNccl ( const cudaLaunchConfig_t* config, const void* func, void** args, const std::string& name)
			+FnReturn()>handleCudaLaunchKernelExC ( const cudaLaunchConfig_t* config, const void* func, void** args, const std::string& name, const std::string& type)
			+FnReturn()>handleCudaLaunchKernel ( const void* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem, cudaStream_t stream, const std::string& name, const std::string& type)
			+isIntercepted(const void* func, std::string* name, std::string* type) : bool
			-getOffset(const void* symbol) : ptrdiff_t
			-getFaBwdShape(void** args) : std::vector<uint64_t>
			-getFaFwdShape(void** args) : std::vector<uint64_t>
			-getNcclShape(void** args) : uint64_t
		}

		class NcclParser {
			+NcclParser(const std::string& library_path)
			+getNcclShape(void**) : uint64_t
			-get_nccl_shape_ : uint64_t (* ) ( void** )
			-LoadFn() : void
		}

		class NvidiaGpuTimer {
			+NvidiaGpuTimer()
			-extra_labels_ : Labels
			+getExtraLabels() : Labels
			-inner_rebuild_cb_ : MatmulBuilderCallback
			+isHang(uint64_t timeout) : bool
			+isReady() : bool
			-start_event_ : cudaEvent_t
			-stop_event_ : cudaEvent_t
			-stream_ : cudaStream_t
			+getTraceCode() : int
			-trace_code_ : int
			-{static} kernel_encoding_counter_ : static int
			-{static} stream_timer_helper_ : static std::unordered_map<cudaStream_t, EventStartTimeHelper*>
			-{static} trace_id_counter_ : static std::unordered_map<int, uint64_t>
			-{static} tracing_metas_ : static std::unordered_map<std::string, int>
			-launch_time_ : std::chrono::time_point<std::chrono::system_clock>
			-string() : std::function<const
			+getName() : std::string
			-name_ : std::string
			-type_ : std::string_view
			+getType() : std::string_view&
			+getExecuteTimeStamp() : time_t
			+getLaunchTimeStamp() : time_t
			-launch_time_timestamp_ : time_t
			-flop_ : uint64_t
			+getDuration() : uint64_t
			+getFlop() : uint64_t
			+getTraceId() : uint64_t
			-hang_counter_ : uint64_t
			-trace_id_ : uint64_t
			+{static} doLogStackTrace() : void
			+{static} doPrepare() : void
			+{static} doPrepareForDumpTrace() : void
			+{static} dumpTraceMeta(const std::string& path) : void
			+endRecord() : void
			+reBuild() : void
			+reset(cudaStream_t s, std::function<NvidiaGpuTimer::FnReturn ( )> cb, const std::string_view& type) : void
			+reset(cudaStream_t s, const std::string_view& type, const std::initializer_list<int>& bmnk, const std::string&& name_prefix, cudaDataType_t dtype, uint8_t bias) : void
			-reset_cb(std::function<NvidiaGpuTimer::FnReturn ( )> cb) : void
			-reset_event(cudaStream_t s, const std::string_view& type) : void
			+startRecord() : void
		}

		class NvidiaGpuTimer::MatmulBuilderCallback {
			+MatmulBuilderCallback()
			+operator()() : NvidiaGpuTimer :: FnReturn
			-dtype_ : cudaDataType_t
			-bmnk_ : std::array<int, 4>
			-name_prefix_ : std::string
			-bias_ : uint8_t
			+reset(const std::initializer_list<int>& bmnk, const std::string&& name_prefix, cudaDataType_t dtype, uint8_t bias) : void
		}
	}

	namespace constant {
		class KernelTraceConstant {
			+{static} DEFAULT_TRACE_COUNT : static constexpr int
			+{static} DEFAULT_TRACE_DUMP_PATH : static constexpr std::string_view
		}

		class Metrics {
			+{static} AVG_LATENCY : static constexpr int
			+{static} CAP : static constexpr int
			+{static} COUNT : static constexpr int
			+{static} FLOPS : static constexpr int
			+{static} MAX_LATENCY : static constexpr int
			+{static} P9999_LATENCY : static constexpr int
			+{static} P99_LATENCY : static constexpr int
			+{static} QPS : static constexpr int
			+{static} COLL_GAUGE_PREFIX : static constexpr std::string_view
			+{static} COLL_TYPE : static constexpr std::string_view
			+{static} MM_GAUGE_PREFIX : static constexpr std::string_view
			+{static} MM_TYPE : static constexpr std::string_view
		}
	}
}





/' Inheritance relationships '/

atorch.server.AsyncJob <|- - atorch.server.StringStacktraceJob


atorch.LibraryLoader <|- - atorch.nvidia.FaParser


atorch.LibraryLoader <|- - atorch.nvidia.NcclParser


atorch.LibraryLoader <|- - atorch.stack_util.PyStackInProcess


atorch.XpuTimer <|- - atorch.nvidia.NvidiaGpuTimer





/' Aggregation relationships '/

atorch.BvarMetrics *- - atorch.server.ClientStub


atorch.BvarMetrics *- - atorch.TimeoutCounter


atorch.GpuTimerManager *- - atorch.util.BlockingDeque


atorch.GpuTimerManager *- - atorch.server.ClientStub


atorch.GpuTimerManager o- - atorch.GpuTimerManager


atorch.GpuTimerManager o- - atorch.MetricsManager


atorch.GpuTimerManager o- - atorch.stack_util.PyStackInProcess


atorch.GpuTimerManager *- - atorch.util.TimerPool


atorch.server.HostingServiceImpl o- - atorch.server.LocalPrometheusService


atorch.server.HostingServiceImpl *- - atorch.util.detail.ShmSwitch


atorch.KernelTraceManager *- - atorch.KernelTrace


atorch.KernelTraceManager o- - atorch.KernelTraceManager


atorch.KernelTraceManager *- - atorch.util.detail.ShmSwitch


atorch.server.LocalPrometheusService *- - atorch.constant.Metrics


atorch.MetricsManager o- - atorch.BvarMetrics


atorch.nvidia.NvidiaGpuTimer o- - atorch.nvidia.EventStartTimeHelper






/' Nested objects '/

atorch.util.detail.InterProcessBarrierImpl +- - atorch.util.detail.InterProcessBarrierImpl::Inner


atorch.nvidia.NvidiaGpuTimer +- - atorch.nvidia.NvidiaGpuTimer::MatmulBuilderCallback



!include comment.iuml


@enduml

@startuml






namespace atorch {
	class BvarMetrics {
		+BvarMetrics()
		+BvarMetrics(BvarMetrics&& other)
		+BvarMetrics(const std::string& name, const std::string_view& type, const uint64_t flop, Labels label, std::shared_ptr<server::ClientStub> stub)
		+~BvarMetrics()
		+isTimeout(int count) : bool
		-sync_ : bool
		-alive_counter_ : int
		-zero_qps_counter_ : int
		-{static} expose_bvar_ : static bool
		-{static} push_interval_ : static std::chrono::seconds
		-{static} coll_bvar_window_size_ : static time_t
		-{static} mm_bvar_window_size_ : static time_t
		-start_ : std::chrono::steady_clock::time_point
		-client_stub_ : std::shared_ptr<server::ClientStub>
		-name_ : std::string
		-timeout_counter_ : std::unique_ptr<TimeoutCounter>
		-bv_ : std::unique_ptr<bvar::LatencyRecorder>
		-flop_ : uint64_t
		+pushMetrics(uint64_t dur_in_us) : void
		+setSync(bool sync) : void
		+{static} setUp() : void
	}

	class GpuTimerManager <template<typename T>> {
		-GpuTimerManager()
		-~GpuTimerManager()
		-working_queue_ : BlockingDeque<T>
		-getMetrics(T* work_item) : BvarMetrics&
		+{static} getInstance() : GpuTimerManager&
		-metrics_manager_ : MetricsManager*
		+getEvent() : T*
		-event_pool_ : TimerPool<T>
		-daemon_ : bp::child*
		-{static} instance_ : inline static GpuTimerManager*
		-{static} init_flag_ : inline static std::once_flag
		-dump_stack_count_ : int
		-py_stack_util_ : stack_util::PyStackInProcess*
		-dump_stub_ : std::shared_ptr<ClientStub>
		-daemon_addr_ : std::string
		-event_poller_ : std::thread
		+intercept_manager : typename T::InnerInterceptManager
		-deregisterMetrics() : void
		-doHang() : void
		-doWork() : void
		-{static} initSingleton() : void
		+recordEvent(T* event) : void
		-startDaemon(int port) : void
		-startWork() : void
		-stopWork() : void
	}

	class KernelTraceManager {
		-KernelTraceManager()
		-~KernelTraceManager()
		+{static} getInstance() : KernelTraceManager&
		-has_do_prepare_for_dump_ : bool
		-has_trigger_trace_ : bool
		+prepareDump() : bool
		+pushTrace(T* work_item) : bool
		+triggerTrace() : bool
		-{static} instance_ : inline static KernelTraceManager*
		-{static} init_flag_ : inline static std::once_flag
		-switch_ : std::unique_ptr<util::ShmSwitch>
		-kernel_trace_ : std::vector<KernelTrace>
		-curr_ : uint32_t
		-kernel_trace_count_ : uint32_t
		+dumpKernelTrace(stack_util::PyStackInProcess* py_stack_util) : void
		-{static} initSingleton() : void
		-reset(const std::string& barrier_name) : void
	}

	class LibraryLoader {
		+LibraryLoader(const std::string& library_path)
		#can_use_ : bool
		#library_path_ : const std::string
		#LoadLibrary() : void
		#handle_ : void*
	}

	class MetricsManager {
		+MetricsManager()
		+~MetricsManager()
		+GetOrCreateMetrics(const std::string& name, const std::string_view& type, const uint64_t flop, Labels label, std::shared_ptr<server::ClientStub> stub) : BvarMetrics&
		-deregister_timeout_count_ : int
		-should_run_ : std::atomic<bool>
		-mu_ : std::mutex
		-deregister_thread_ : std::thread
		-metrics_ : std::unordered_map<std::string, BvarMetrics*>
		+DeleteMetrics(bool exit) : void
		-checkMetrics() : void
		+deregisterMetrics() : void
	}

	class TimeoutCounter {
		+TimeoutCounter()
		-counter_ : std::unique_ptr<bvar::Adder<uint64_t>>
		-timout_counter_ : std::unique_ptr<bvar::Window<bvar::Adder<uint64_t>>>
		+ThroughtPut() : uint64_t
		+Add() : void
	}

	abstract class XpuTimer {
		+{abstract} getExtraLabels() : Labels
		+{abstract} isHang(uint64_t timeout) : bool
		+{abstract} isReady() : bool
		+{abstract} getTraceCode() : int
		+{abstract} getName() : std::string
		+{abstract} getType() : std::string_view&
		+{abstract} getExecuteTimeStamp() : time_t
		+{abstract} getLaunchTimeStamp() : time_t
		+{abstract} getDuration() : uint64_t
		+{abstract} getFlop() : uint64_t
		+{abstract} getTraceId() : uint64_t
		+{static} doPrepare() : void
		+{static} doPrepareForDumpTrace() : void
		+{static} dumpTraceMeta(const std::string& path) : void
		+{abstract} endRecord() : void
		+{abstract} reBuild() : void
		+{abstract} startRecord() : void
	}

	class KernelTrace {
		+kernel_type : int
		+trace_code : int
		+execute_timestamp : time_t
		+delay : uint32_t
		+dur : uint32_t
		+trace_id : uint64_t
	}

	class PyStackTrace {
		+line : int
		+filename : std::string
		+function_name : std::string
	}

	namespace util {
		class BlockingDeque <template<typename T>> {
			+pop(std::function<bool ( T* )> is_hang, std::function<bool ( T* )> is_ready) : T*
			-mutex_ : mutable std::mutex
			-cond_var_ : std::condition_variable
			-deque_ : std::deque<T*>
			+printHangName(std::vector<std::string>* hang_items) : void
			+push(T* valuePtr) : void
		}

		class EnvVarRegistry {
			+{static} GetEnvVar(const std::string& name) : T
			-{static} getDefault() : T
			-{static} getEnvInner(std::string env_name, bool* has_env) : T
			+{static} convert_to_variant(const std::string_view& sv) : VarType
			+{static} convert_to_variant(const char* s) : VarType
			+{static} convert_to_variant(const T& val) : VarType
			-{static} GetPtree() : boost::property_tree::ptree&
			+{static} BOOL_DEFAULT_VALUE : static constexpr bool
			+{static} INT_DEFAULT_VALUE : static constexpr int
			+{static} STRING_DEFAULT_VALUE : static constexpr std::string_view
			-{static} GetRegistry() : std::unordered_map<std::string , VarType>&
			+{static} RegisterEnvVar(const std::string& name, variant<int, bool, std::string> default_value) : void
		}

		class ScopeGuard {
			+ScopeGuard(std::function<void ( )> cb)
			-function<void()
			+~ScopeGuard()
		}

		class ShmType <template<typename T>> {
			+ShmType(int local_world_size, int local_rank, bool main)
			+~ShmType()
			+getObj() : T*
			-obj_ : T*
			-shm_area_ : bip::managed_shared_memory*
			-shm_name_ : std::string
		}

		class TimerPool <template<typename T>> {
			+TimerPool()
			+getObject() : T*
			-pool_ : std::deque<T*>
			-mutex_ : std::mutex
			+returnObject(T* obj) : void
		}

		namespace detail {
			class InterProcessBarrierImpl {
				+InterProcessBarrierImpl(std::string name, int world_size, int rank)
				+~InterProcessBarrierImpl()
				+name_ : std::string
			}

			class InterProcessBarrierImpl::Inner {
				+Inner(bool val)
				+val : bool
				+reset(bool value) : void
			}

			class ShmSwitch {
				+reset_flag : bool
				+dump_path : char
				+start_dump : int
				+timestamp : int64_t
				+{static} BarrierName : static constexpr std::string_view
				+{static} ObjName : static constexpr std::string_view
				+{static} ShmName : static constexpr std::string_view
				+dump_count : uint32_t
				+dump_path_length : uint32_t
				+reset() : void
				+reset(const std::string& path, uint32_t count, int64_t stamp) : void
				+reset(const std::string& path, uint32_t count, int64_t stamp, bool reset_signal) : void
			}
		}

		namespace config {
			class GlobalConfig {
				+{static} debug_mode : static bool
				+{static} enable : static bool
				+{static} ip : static std::string
				+{static} job_name : static std::string
				+{static} pod_name : static std::string
				+{static} rank_str : static std::string
				+{static} all_devices : static std::vector<uint64_t>
				+{static} local_rank : static uint32_t
				+{static} local_world_size : static uint32_t
				+{static} rank : static uint32_t
				+{static} world_size : static uint32_t
			}
		}
	}

	namespace stack_util {
		class PyStackInProcess {
			+PyStackInProcess(const std::string& library_path)
			+getPyStack() : PyStack
			-get_py_stack_fn_ : PyStack (* ) ( )
			+shouldDump(uint64_t count) : bool
			-stack_maps_ : std::unordered_map<std::string, PyStack>
			-dump_count_ : uint64_t
			-LoadFn() : void
			+dumpPyStack(const std::string& path, int rank) : void
			+insertPyStack(const std::string& kernel_name) : void
			+insertPyStack(const std::string& kernel_name, const PyStack&& stack) : void
		}
	}

	namespace server {
		abstract class AsyncJob {
			+~AsyncJob()
			+cntl : brpc::Controller*
			+done : google::protobuf::Closure*
			+{abstract} run() : void
			+run_and_delete() : void
			+{static} RunServerJob(void* args) : void*
		}

		class ClientStub {
			+ClientStub(std::string endpoint)
			-stub_ : HostingService_Stub*
			-channel_ : brpc::Channel*
			-options_ : brpc::ChannelOptions*
			-{static} HandleDeregisterPrometheusResponse(brpc::Controller* cntl, RegisterPrometheusResponse* response) : void
			-{static} HandleDumpResponse(brpc::Controller* cntl, StacktraceResponse* response) : void
			-{static} HandlePushPrometheusResponse(brpc::Controller* cntl, google::protobuf::Empty* response) : void
			-{static} HandleRegisterPrometheusResponse(brpc::Controller* cntl, RegisterPrometheusResponse* response) : void
			+pushPrometheusMetrics(bool sync, const std::string& name, int local_rank, uint64_t qps, uint64_t avg_latency, uint64_t max_latency, uint64_t p99_latency, uint64_t p9999_latency, double flops, uint64_t count) : void
			+requestDeRegisterPrometheus(bool sync, const std::string& name, int rank, int local_rank) : void
			+requestDump(bool sync, int pid, int rank, int world_size, const std::string& dump_path, const std::vector<std::string>& hang_kernel) : void
			+requestRegisterPrometheus(bool sync, const std::string& name, const std::string& gauge_name, int rank, int local_rank, const std::map<std::string, std::string>& labels) : void
		}

		class HostingServiceImpl {
			+HostingServiceImpl(int local_world_size)
			-local_world_size_ : int
			-rank_ : int
			-switch_ : std::unique_ptr<util::ShmSwitch>
			-mus_ : std::vector<std::unique_ptr<butil::Mutex>>
			-prometheus_services_ : std::vector<std::unordered_map<std::string, LocalPrometheusService*>>
			+DeRegisterPrometheus(google::protobuf::RpcController* cntl_base, const DeRegisterPrometheusRequest* request, RegisterPrometheusResponse* response, google::protobuf::Closure* done) : void
			+DumpKernelTrace(google::protobuf::RpcController* cntl_base, const DumpKernelTraceRequest* request, DumpKernelTraceResponse* response, google::protobuf::Closure* done) : void
			+DumpStringStacktrace(google::protobuf::RpcController* cntl_base, const StacktraceRequest* request, StacktraceResponse* response, google::protobuf::Closure* done) : void
			+PushPrometheus(google::protobuf::RpcController* cntl_base, const BrpcMetrics* request, google::protobuf::Empty* response, google::protobuf::Closure* done) : void
			+RegisterPrometheus(google::protobuf::RpcController* cntl_base, const RegisterPrometheusRequest* request, RegisterPrometheusResponse* response, google::protobuf::Closure* done) : void
		}

		class LocalPrometheusService {
			+LocalPrometheusService(const std::string& gauge_prefix, const std::string& kernel_name, const std::map<std::string, std::string>& label, int rank)
			+LocalPrometheusService(LocalPrometheusService&& other)
			+~LocalPrometheusService()
			-gauges_ : array<Gauge_t, constant::Metrics::CAP>
			-rank_ : int
			-{static} mu_ : static butil::Mutex
			-{static} exposer_ : static prometheus::Exposer*
			-{static} registry_ : static std::shared_ptr<prometheus::Registry>
			-{static} all_familys_ : static std::unordered_map<std::string, Family_t_Array>
			-{static} all_gauges_ : static std::vector<Gauge_t_MapArray>
			-gauge_prefix_ : std::string
			-kernel_name_ : std::string
			+push(const BrpcMetrics* metrics) : void
			+{static} setUp(int port, int local_world_size) : void
		}

		class MainServer {
			+MainServer(const std::string& endpoint, int thread_num, int prometheus_port, int local_world_size)
			-server_ : brpc::Server
			-options_ : brpc::ServerOptions
			-local_world_size_ : int
			-thread_num_ : int
			+{static} DUMMY_SERVER : static constexpr std::string_view
			+{static} HOSTING_SERVICE : static constexpr std::string_view
			+{static} LOCAL_RANK_0_SERVER : static constexpr std::string_view
			-endpoint_ : std::string
			-services_ : std::unordered_map<std::string_view, google::protobuf::Service*>
			-addService(const std::string_view& service_name) : void
			+join() : void
			+start(const std::string_view& server_type) : void
		}

		class StringStacktraceJob {
			-~StringStacktraceJob()
			+response : StacktraceResponse*
			-stderr_buf : butil::IOBuf
			-stdout_buf : butil::IOBuf
			+request : const StacktraceRequest*
			+run() : void
		}
	}

	namespace nvidia {
		class EventStartTimeHelper {
			+EventStartTimeHelper(cudaStream_t s)
			-start_event_ : cudaEvent_t
			-stream_ : cudaStream_t
			-cpu_time_ : time_t
			+getTime(cudaEvent_t kernel_launch_start) : time_t
			+reset() : void
		}

		class FaParser {
			+FaParser(const std::string& library_path)
			+getFaBwdShape(void**) : std::vector<uint64_t>
			+getFaFwdShape(void**) : std::vector<uint64_t>
			-get_bwd_shape_ : vector<uint64_t>(* ) ( void** )
			-get_fwd_shape_ : vector<uint64_t>(* ) ( void** )
			-LoadFn() : void
		}

		class InterceptManager {
			-FnReturn()>handleFa ( void** args, const std::string& name, const std::string& type)
			-FnReturn()>handleNccl ( const cudaLaunchConfig_t* config, const void* func, void** args, const std::string& name)
			+FnReturn()>handleCudaLaunchKernelExC ( const cudaLaunchConfig_t* config, const void* func, void** args, const std::string& name, const std::string& type)
			+FnReturn()>handleCudaLaunchKernel ( const void* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem, cudaStream_t stream, const std::string& name, const std::string& type)
			+isIntercepted(const void* func, std::string* name, std::string* type) : bool
			-getOffset(const void* symbol) : ptrdiff_t
			-getFaBwdShape(void** args) : std::vector<uint64_t>
			-getFaFwdShape(void** args) : std::vector<uint64_t>
			-getNcclShape(void** args) : uint64_t
		}

		class NcclParser {
			+NcclParser(const std::string& library_path)
			+getNcclShape(void**) : uint64_t
			-get_nccl_shape_ : uint64_t (* ) ( void** )
			-LoadFn() : void
		}

		class NvidiaGpuTimer {
			+NvidiaGpuTimer()
			-extra_labels_ : Labels
			+getExtraLabels() : Labels
			-inner_rebuild_cb_ : MatmulBuilderCallback
			+isHang(uint64_t timeout) : bool
			+isReady() : bool
			-start_event_ : cudaEvent_t
			-stop_event_ : cudaEvent_t
			-stream_ : cudaStream_t
			+getTraceCode() : int
			-trace_code_ : int
			-{static} kernel_encoding_counter_ : static int
			-{static} stream_timer_helper_ : static std::unordered_map<cudaStream_t, EventStartTimeHelper*>
			-{static} trace_id_counter_ : static std::unordered_map<int, uint64_t>
			-{static} tracing_metas_ : static std::unordered_map<std::string, int>
			-launch_time_ : std::chrono::time_point<std::chrono::system_clock>
			-string() : std::function<const
			+getName() : std::string
			-name_ : std::string
			-type_ : std::string_view
			+getType() : std::string_view&
			+getExecuteTimeStamp() : time_t
			+getLaunchTimeStamp() : time_t
			-launch_time_timestamp_ : time_t
			-flop_ : uint64_t
			+getDuration() : uint64_t
			+getFlop() : uint64_t
			+getTraceId() : uint64_t
			-hang_counter_ : uint64_t
			-trace_id_ : uint64_t
			+{static} doLogStackTrace() : void
			+{static} doPrepare() : void
			+{static} doPrepareForDumpTrace() : void
			+{static} dumpTraceMeta(const std::string& path) : void
			+endRecord() : void
			+reBuild() : void
			+reset(cudaStream_t s, std::function<NvidiaGpuTimer::FnReturn ( )> cb, const std::string_view& type) : void
			+reset(cudaStream_t s, const std::string_view& type, const std::initializer_list<int>& bmnk, const std::string&& name_prefix, cudaDataType_t dtype, uint8_t bias) : void
			-reset_cb(std::function<NvidiaGpuTimer::FnReturn ( )> cb) : void
			-reset_event(cudaStream_t s, const std::string_view& type) : void
			+startRecord() : void
		}

		class NvidiaGpuTimer::MatmulBuilderCallback {
			+MatmulBuilderCallback()
			+operator()() : NvidiaGpuTimer :: FnReturn
			-dtype_ : cudaDataType_t
			-bmnk_ : std::array<int, 4>
			-name_prefix_ : std::string
			-bias_ : uint8_t
			+reset(const std::initializer_list<int>& bmnk, const std::string&& name_prefix, cudaDataType_t dtype, uint8_t bias) : void
		}
	}

	namespace constant {
		class KernelTraceConstant {
			+{static} DEFAULT_TRACE_COUNT : static constexpr int
			+{static} DEFAULT_TRACE_DUMP_PATH : static constexpr std::string_view
		}

		class Metrics {
			+{static} AVG_LATENCY : static constexpr int
			+{static} CAP : static constexpr int
			+{static} COUNT : static constexpr int
			+{static} FLOPS : static constexpr int
			+{static} MAX_LATENCY : static constexpr int
			+{static} P9999_LATENCY : static constexpr int
			+{static} P99_LATENCY : static constexpr int
			+{static} QPS : static constexpr int
			+{static} COLL_GAUGE_PREFIX : static constexpr std::string_view
			+{static} COLL_TYPE : static constexpr std::string_view
			+{static} MM_GAUGE_PREFIX : static constexpr std::string_view
			+{static} MM_TYPE : static constexpr std::string_view
		}
	}
}






atorch.server.AsyncJob <|- - atorch.server.StringStacktraceJob


atorch.LibraryLoader <|- - atorch.nvidia.FaParser


atorch.LibraryLoader <|- - atorch.nvidia.NcclParser


atorch.LibraryLoader <|- - atorch.stack_util.PyStackInProcess


atorch.XpuTimer <|- - atorch.nvidia.NvidiaGpuTimer






atorch.BvarMetrics *- - atorch.server.ClientStub


atorch.BvarMetrics *- - atorch.TimeoutCounter


atorch.GpuTimerManager *- - atorch.util.BlockingDeque


atorch.GpuTimerManager *- - atorch.server.ClientStub


atorch.GpuTimerManager o- - atorch.GpuTimerManager


atorch.GpuTimerManager o- - atorch.MetricsManager


atorch.GpuTimerManager o- - atorch.stack_util.PyStackInProcess


atorch.GpuTimerManager *- - atorch.util.TimerPool


atorch.server.HostingServiceImpl o- - atorch.server.LocalPrometheusService


atorch.server.HostingServiceImpl *- - atorch.util.detail.ShmSwitch


atorch.KernelTraceManager *- - atorch.KernelTrace


atorch.KernelTraceManager o- - atorch.KernelTraceManager


atorch.KernelTraceManager *- - atorch.util.detail.ShmSwitch


atorch.server.LocalPrometheusService *- - atorch.constant.Metrics


atorch.MetricsManager o- - atorch.BvarMetrics


atorch.nvidia.NvidiaGpuTimer o- - atorch.nvidia.EventStartTimeHelper







atorch.util.detail.InterProcessBarrierImpl +- - atorch.util.detail.InterProcessBarrierImpl::Inner


atorch.nvidia.NvidiaGpuTimer +- - atorch.nvidia.NvidiaGpuTimer::MatmulBuilderCallback




note left of atorch.XpuTimer::getExtraLabels
  获取 prometheus 投递 label
end note

note left of atorch.XpuTimer::isHang
  判断这个 event 是否 hang
end note

note left of atorch.XpuTimer::isReady
  判断这个 event 是否 ready
end note

note left of atorch.XpuTimer::getTraceCode
  获取这个 event 的 trace 编号
end note

note left of atorch.XpuTimer::getName
  获取这个 event 的名称
end note

note left of atorch.XpuTimer::getType
  获取这个 event kernel 的种类
end note

note left of atorch.XpuTimer::getExecuteTimeStamp
  获取这个 kernel 的实际被调度运行的时间
end note

note left of atorch.XpuTimer::getLaunchTimeStamp
  获取这个 kernel 的发射时间
end note

note left of atorch.XpuTimer::getDuration
  获取这个 kernel 的运行时长
end note

note left of atorch.XpuTimer::getFlop
  获取这个 kernel 的 flop 数
end note

note left of atorch.XpuTimer::getTraceId
  获取这个 kernel 的 trace id, 用于区分一个 timeline 中有相同名字的 kernel
end note

note left of atorch.XpuTimer::doPrepare
  每个继承 XpuTimer 的类在启动前额外的准备，比如 reload nccl syms
end note

note left of atorch.XpuTimer::doPrepareForDumpTrace
  每个继承 XpuTimer 的类在 dump timeline 前额外的准备
  比如重新对每个 stream 上记录新的 init event
end note

note left of atorch.XpuTimer::dumpTraceMeta
  每个继承 XpuTimer 的类在 dump timeline 时产出的 meta 数据
  用于生成 timeline 时解析 trace
end note

note left of atorch.XpuTimer::endRecord
  为每个 kernel 发射后记录 event
end note

note left of atorch.XpuTimer::reBuild
  为每个 kernel 在 ready 后回调创建一些耗费时间片的操作
  比如获取名字，flop 等操作
end note

note left of atorch.XpuTimer::startRecord
  为每个 kernel 发射前记录 event
end note

atorch.GpuTimerManager *- - atorch.KernelTraceManager
atorch.GpuTimerManager <|- - atorch.nvidia.NvidiaGpuTimer : template class, T=NvidiaGpuTimer
atorch.util.detail.ShmSwitch <|- - atorch.util.ShmType : template class, T=atorch.util.detail.ShmSwitch
atorch.constant.KernelTraceConstant <.. atorch.util.EnvVarRegistry
atorch.server.MainServer o- - atorch.server.HostingServiceImpl
atorch.server.StringStacktraceJob <.. atorch.server.HostingServiceImpl 
atorch.GpuTimerManager *- - atorch.nvidia.InterceptManager
atorch.XpuTimer ..[hidden]> atorch.LibraryLoader
atorch.XpuTimer ..[hidden]> atorch.PyStackTrace


note "Hook 功能主入口,Lazy 初始化" as EntryPoint
EntryPoint .- atorch.GpuTimerManager

note "xpu_daemon_server 实现" as Daemon
Daemon .- atorch.server.MainServer

note "进程内 python 打栈实现, 使用 dlopen 打开 libpy_xpu_timer_callstack.so\n具体实现在 py_xpu_timer/src/py_xpu_callstack.cc" as CythonStack

CythonStack .- atorch.stack_util.PyStackInProcess


@enduml

PlantUML version 1.2022.5(Sat Apr 30 18:55:52 CST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: CN
--></g></svg>