// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.7.1
// source: dlrover/proto/brain.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricsType int32

const (
	MetricsType_Training_Hyper_Params MetricsType = 0
	MetricsType_Workflow_Feature      MetricsType = 1
	MetricsType_Training_Set_Feature  MetricsType = 2
	MetricsType_Model_Feature         MetricsType = 3
	MetricsType_Runtime_Info          MetricsType = 4
	MetricsType_Job_Exit_Reason       MetricsType = 5
	MetricsType_Optimization_Result   MetricsType = 6
	MetricsType_Type                  MetricsType = 7
	MetricsType_Resource              MetricsType = 8
	MetricsType_Customized_Data       MetricsType = 9
	MetricsType_Optimization          MetricsType = 10
)

// Enum value maps for MetricsType.
var (
	MetricsType_name = map[int32]string{
		0:  "Training_Hyper_Params",
		1:  "Workflow_Feature",
		2:  "Training_Set_Feature",
		3:  "Model_Feature",
		4:  "Runtime_Info",
		5:  "Job_Exit_Reason",
		6:  "Optimization_Result",
		7:  "Type",
		8:  "Resource",
		9:  "Customized_Data",
		10: "Optimization",
	}
	MetricsType_value = map[string]int32{
		"Training_Hyper_Params": 0,
		"Workflow_Feature":      1,
		"Training_Set_Feature":  2,
		"Model_Feature":         3,
		"Runtime_Info":          4,
		"Job_Exit_Reason":       5,
		"Optimization_Result":   6,
		"Type":                  7,
		"Resource":              8,
		"Customized_Data":       9,
		"Optimization":          10,
	}
)

func (x MetricsType) Enum() *MetricsType {
	p := new(MetricsType)
	*p = x
	return p
}

func (x MetricsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricsType) Descriptor() protoreflect.EnumDescriptor {
	return file_dlrover_proto_brain_proto_enumTypes[0].Descriptor()
}

func (MetricsType) Type() protoreflect.EnumType {
	return &file_dlrover_proto_brain_proto_enumTypes[0]
}

func (x MetricsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricsType.Descriptor instead.
func (MetricsType) EnumDescriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{0}
}

type TrainingHyperParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize int64 `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Epoch     int64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	MaxSteps  int64 `protobuf:"varint,3,opt,name=max_steps,json=maxSteps,proto3" json:"max_steps,omitempty"`
}

func (x *TrainingHyperParams) Reset() {
	*x = TrainingHyperParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingHyperParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingHyperParams) ProtoMessage() {}

func (x *TrainingHyperParams) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingHyperParams.ProtoReflect.Descriptor instead.
func (*TrainingHyperParams) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{0}
}

func (x *TrainingHyperParams) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *TrainingHyperParams) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *TrainingHyperParams) GetMaxSteps() int64 {
	if x != nil {
		return x.MaxSteps
	}
	return 0
}

type WorkflowFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName     string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CodeAddress string `protobuf:"bytes,3,opt,name=code_address,json=codeAddress,proto3" json:"code_address,omitempty"`
	WorkflowId  string `protobuf:"bytes,4,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	NodeId      string `protobuf:"bytes,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	OdpsProject string `protobuf:"bytes,6,opt,name=odps_project,json=odpsProject,proto3" json:"odps_project,omitempty"`
	IsProd      bool   `protobuf:"varint,7,opt,name=is_prod,json=isProd,proto3" json:"is_prod,omitempty"`
}

func (x *WorkflowFeature) Reset() {
	*x = WorkflowFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowFeature) ProtoMessage() {}

func (x *WorkflowFeature) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowFeature.ProtoReflect.Descriptor instead.
func (*WorkflowFeature) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{1}
}

func (x *WorkflowFeature) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *WorkflowFeature) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WorkflowFeature) GetCodeAddress() string {
	if x != nil {
		return x.CodeAddress
	}
	return ""
}

func (x *WorkflowFeature) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowFeature) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *WorkflowFeature) GetOdpsProject() string {
	if x != nil {
		return x.OdpsProject
	}
	return ""
}

func (x *WorkflowFeature) GetIsProd() bool {
	if x != nil {
		return x.IsProd
	}
	return false
}

type TrainingSetFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetSize         int64  `protobuf:"varint,1,opt,name=dataset_size,json=datasetSize,proto3" json:"dataset_size,omitempty"`
	DatasetName         string `protobuf:"bytes,2,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	SparseItemCount     int64  `protobuf:"varint,3,opt,name=sparse_item_count,json=sparseItemCount,proto3" json:"sparse_item_count,omitempty"`
	SparseFeatures      string `protobuf:"bytes,4,opt,name=sparse_features,json=sparseFeatures,proto3" json:"sparse_features,omitempty"`
	SparseFeatureGroups string `protobuf:"bytes,5,opt,name=sparse_feature_groups,json=sparseFeatureGroups,proto3" json:"sparse_feature_groups,omitempty"`
	SparseFeatureShapes string `protobuf:"bytes,6,opt,name=sparse_feature_shapes,json=sparseFeatureShapes,proto3" json:"sparse_feature_shapes,omitempty"`
	DenseFeatures       string `protobuf:"bytes,7,opt,name=dense_features,json=denseFeatures,proto3" json:"dense_features,omitempty"`
	DenseFeatureShapes  string `protobuf:"bytes,8,opt,name=dense_feature_shapes,json=denseFeatureShapes,proto3" json:"dense_feature_shapes,omitempty"`
	StorageSize         int64  `protobuf:"varint,9,opt,name=storage_size,json=storageSize,proto3" json:"storage_size,omitempty"`
}

func (x *TrainingSetFeature) Reset() {
	*x = TrainingSetFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingSetFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingSetFeature) ProtoMessage() {}

func (x *TrainingSetFeature) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingSetFeature.ProtoReflect.Descriptor instead.
func (*TrainingSetFeature) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{2}
}

func (x *TrainingSetFeature) GetDatasetSize() int64 {
	if x != nil {
		return x.DatasetSize
	}
	return 0
}

func (x *TrainingSetFeature) GetDatasetName() string {
	if x != nil {
		return x.DatasetName
	}
	return ""
}

func (x *TrainingSetFeature) GetSparseItemCount() int64 {
	if x != nil {
		return x.SparseItemCount
	}
	return 0
}

func (x *TrainingSetFeature) GetSparseFeatures() string {
	if x != nil {
		return x.SparseFeatures
	}
	return ""
}

func (x *TrainingSetFeature) GetSparseFeatureGroups() string {
	if x != nil {
		return x.SparseFeatureGroups
	}
	return ""
}

func (x *TrainingSetFeature) GetSparseFeatureShapes() string {
	if x != nil {
		return x.SparseFeatureShapes
	}
	return ""
}

func (x *TrainingSetFeature) GetDenseFeatures() string {
	if x != nil {
		return x.DenseFeatures
	}
	return ""
}

func (x *TrainingSetFeature) GetDenseFeatureShapes() string {
	if x != nil {
		return x.DenseFeatureShapes
	}
	return ""
}

func (x *TrainingSetFeature) GetStorageSize() int64 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

type ModelFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VariableCount      int64            `protobuf:"varint,1,opt,name=variable_count,json=variableCount,proto3" json:"variable_count,omitempty"`
	OpCount            int64            `protobuf:"varint,2,opt,name=op_count,json=opCount,proto3" json:"op_count,omitempty"`
	EmbeddingDimension int64            `protobuf:"varint,3,opt,name=embedding_dimension,json=embeddingDimension,proto3" json:"embedding_dimension,omitempty"`
	TotalVariableSize  int64            `protobuf:"varint,4,opt,name=total_variable_size,json=totalVariableSize,proto3" json:"total_variable_size,omitempty"`
	MaxVariableSize    int64            `protobuf:"varint,5,opt,name=max_variable_size,json=maxVariableSize,proto3" json:"max_variable_size,omitempty"`
	UpdateOpCount      int64            `protobuf:"varint,6,opt,name=update_op_count,json=updateOpCount,proto3" json:"update_op_count,omitempty"`
	ReadOpCount        int64            `protobuf:"varint,7,opt,name=read_op_count,json=readOpCount,proto3" json:"read_op_count,omitempty"`
	InputFetchDur      int64            `protobuf:"varint,8,opt,name=input_fetch_dur,json=inputFetchDur,proto3" json:"input_fetch_dur,omitempty"`
	Flops              int64            `protobuf:"varint,9,opt,name=flops,proto3" json:"flops,omitempty"`
	RecvOpCount        int64            `protobuf:"varint,10,opt,name=recv_op_count,json=recvOpCount,proto3" json:"recv_op_count,omitempty"`
	KvEmbeddingDims    []int64          `protobuf:"varint,11,rep,packed,name=kv_embedding_dims,json=kvEmbeddingDims,proto3" json:"kv_embedding_dims,omitempty"`
	TensorAllocBytes   map[string]int64 `protobuf:"bytes,12,rep,name=tensor_alloc_bytes,json=tensorAllocBytes,proto3" json:"tensor_alloc_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ModelFeature) Reset() {
	*x = ModelFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelFeature) ProtoMessage() {}

func (x *ModelFeature) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelFeature.ProtoReflect.Descriptor instead.
func (*ModelFeature) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{3}
}

func (x *ModelFeature) GetVariableCount() int64 {
	if x != nil {
		return x.VariableCount
	}
	return 0
}

func (x *ModelFeature) GetOpCount() int64 {
	if x != nil {
		return x.OpCount
	}
	return 0
}

func (x *ModelFeature) GetEmbeddingDimension() int64 {
	if x != nil {
		return x.EmbeddingDimension
	}
	return 0
}

func (x *ModelFeature) GetTotalVariableSize() int64 {
	if x != nil {
		return x.TotalVariableSize
	}
	return 0
}

func (x *ModelFeature) GetMaxVariableSize() int64 {
	if x != nil {
		return x.MaxVariableSize
	}
	return 0
}

func (x *ModelFeature) GetUpdateOpCount() int64 {
	if x != nil {
		return x.UpdateOpCount
	}
	return 0
}

func (x *ModelFeature) GetReadOpCount() int64 {
	if x != nil {
		return x.ReadOpCount
	}
	return 0
}

func (x *ModelFeature) GetInputFetchDur() int64 {
	if x != nil {
		return x.InputFetchDur
	}
	return 0
}

func (x *ModelFeature) GetFlops() int64 {
	if x != nil {
		return x.Flops
	}
	return 0
}

func (x *ModelFeature) GetRecvOpCount() int64 {
	if x != nil {
		return x.RecvOpCount
	}
	return 0
}

func (x *ModelFeature) GetKvEmbeddingDims() []int64 {
	if x != nil {
		return x.KvEmbeddingDims
	}
	return nil
}

func (x *ModelFeature) GetTensorAllocBytes() map[string]int64 {
	if x != nil {
		return x.TensorAllocBytes
	}
	return nil
}

type RuntimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalStep  int64      `protobuf:"varint,1,opt,name=global_step,json=globalStep,proto3" json:"global_step,omitempty"`
	RunningPods []*PodMeta `protobuf:"bytes,2,rep,name=running_pods,json=runningPods,proto3" json:"running_pods,omitempty"`
	TimeStamp   int64      `protobuf:"varint,3,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	Speed       float32    `protobuf:"fixed32,4,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *RuntimeInfo) Reset() {
	*x = RuntimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeInfo) ProtoMessage() {}

func (x *RuntimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeInfo.ProtoReflect.Descriptor instead.
func (*RuntimeInfo) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{4}
}

func (x *RuntimeInfo) GetGlobalStep() int64 {
	if x != nil {
		return x.GlobalStep
	}
	return 0
}

func (x *RuntimeInfo) GetRunningPods() []*PodMeta {
	if x != nil {
		return x.RunningPods
	}
	return nil
}

func (x *RuntimeInfo) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *RuntimeInfo) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type PodMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName   string  `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodIp     string  `protobuf:"bytes,2,opt,name=pod_ip,json=podIp,proto3" json:"pod_ip,omitempty"`
	NodeIp    string  `protobuf:"bytes,3,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	HostName  string  `protobuf:"bytes,4,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	Namespace string  `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	IsMixed   bool    `protobuf:"varint,6,opt,name=is_mixed,json=isMixed,proto3" json:"is_mixed,omitempty"`
	MemUsage  float64 `protobuf:"fixed64,7,opt,name=mem_usage,json=memUsage,proto3" json:"mem_usage,omitempty"`
	CpuUsage  float64 `protobuf:"fixed64,8,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
}

func (x *PodMeta) Reset() {
	*x = PodMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodMeta) ProtoMessage() {}

func (x *PodMeta) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodMeta.ProtoReflect.Descriptor instead.
func (*PodMeta) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{5}
}

func (x *PodMeta) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *PodMeta) GetPodIp() string {
	if x != nil {
		return x.PodIp
	}
	return ""
}

func (x *PodMeta) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *PodMeta) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *PodMeta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PodMeta) GetIsMixed() bool {
	if x != nil {
		return x.IsMixed
	}
	return false
}

func (x *PodMeta) GetMemUsage() float64 {
	if x != nil {
		return x.MemUsage
	}
	return 0
}

func (x *PodMeta) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

type JobMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`           // The uuid of k8s training job
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`           // The name of k8s training job
	User      string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`           // The user id of k8s training job
	Cluster   string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`     // The cluster of k8s training job
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"` // The namespace of k8s training job
}

func (x *JobMeta) Reset() {
	*x = JobMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobMeta) ProtoMessage() {}

func (x *JobMeta) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobMeta.ProtoReflect.Descriptor instead.
func (*JobMeta) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{6}
}

func (x *JobMeta) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *JobMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobMeta) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *JobMeta) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *JobMeta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type JobMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataStore   string      `protobuf:"bytes,1,opt,name=data_store,json=dataStore,proto3" json:"data_store,omitempty"`
	JobMeta     *JobMeta    `protobuf:"bytes,2,opt,name=job_meta,json=jobMeta,proto3" json:"job_meta,omitempty"`
	MetricsType MetricsType `protobuf:"varint,3,opt,name=metrics_type,json=metricsType,proto3,enum=brain.MetricsType" json:"metrics_type,omitempty"`
	// Types that are assignable to Metrics:
	//
	//	*JobMetrics_TrainingHyperParams
	//	*JobMetrics_WorkflowFeature
	//	*JobMetrics_TrainingSetFeature
	//	*JobMetrics_ModelFeature
	//	*JobMetrics_RuntimeInfo
	//	*JobMetrics_JobExitReason
	//	*JobMetrics_ExtraInfo
	//	*JobMetrics_Type
	//	*JobMetrics_Resource
	//	*JobMetrics_CustomizedData
	//	*JobMetrics_JobOptimization
	Metrics isJobMetrics_Metrics `protobuf_oneof:"metrics"`
}

func (x *JobMetrics) Reset() {
	*x = JobMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobMetrics) ProtoMessage() {}

func (x *JobMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobMetrics.ProtoReflect.Descriptor instead.
func (*JobMetrics) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{7}
}

func (x *JobMetrics) GetDataStore() string {
	if x != nil {
		return x.DataStore
	}
	return ""
}

func (x *JobMetrics) GetJobMeta() *JobMeta {
	if x != nil {
		return x.JobMeta
	}
	return nil
}

func (x *JobMetrics) GetMetricsType() MetricsType {
	if x != nil {
		return x.MetricsType
	}
	return MetricsType_Training_Hyper_Params
}

func (m *JobMetrics) GetMetrics() isJobMetrics_Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (x *JobMetrics) GetTrainingHyperParams() *TrainingHyperParams {
	if x, ok := x.GetMetrics().(*JobMetrics_TrainingHyperParams); ok {
		return x.TrainingHyperParams
	}
	return nil
}

func (x *JobMetrics) GetWorkflowFeature() *WorkflowFeature {
	if x, ok := x.GetMetrics().(*JobMetrics_WorkflowFeature); ok {
		return x.WorkflowFeature
	}
	return nil
}

func (x *JobMetrics) GetTrainingSetFeature() *TrainingSetFeature {
	if x, ok := x.GetMetrics().(*JobMetrics_TrainingSetFeature); ok {
		return x.TrainingSetFeature
	}
	return nil
}

func (x *JobMetrics) GetModelFeature() *ModelFeature {
	if x, ok := x.GetMetrics().(*JobMetrics_ModelFeature); ok {
		return x.ModelFeature
	}
	return nil
}

func (x *JobMetrics) GetRuntimeInfo() *RuntimeInfo {
	if x, ok := x.GetMetrics().(*JobMetrics_RuntimeInfo); ok {
		return x.RuntimeInfo
	}
	return nil
}

func (x *JobMetrics) GetJobExitReason() string {
	if x, ok := x.GetMetrics().(*JobMetrics_JobExitReason); ok {
		return x.JobExitReason
	}
	return ""
}

func (x *JobMetrics) GetExtraInfo() string {
	if x, ok := x.GetMetrics().(*JobMetrics_ExtraInfo); ok {
		return x.ExtraInfo
	}
	return ""
}

func (x *JobMetrics) GetType() string {
	if x, ok := x.GetMetrics().(*JobMetrics_Type); ok {
		return x.Type
	}
	return ""
}

func (x *JobMetrics) GetResource() string {
	if x, ok := x.GetMetrics().(*JobMetrics_Resource); ok {
		return x.Resource
	}
	return ""
}

func (x *JobMetrics) GetCustomizedData() string {
	if x, ok := x.GetMetrics().(*JobMetrics_CustomizedData); ok {
		return x.CustomizedData
	}
	return ""
}

func (x *JobMetrics) GetJobOptimization() *JobOptimization {
	if x, ok := x.GetMetrics().(*JobMetrics_JobOptimization); ok {
		return x.JobOptimization
	}
	return nil
}

type isJobMetrics_Metrics interface {
	isJobMetrics_Metrics()
}

type JobMetrics_TrainingHyperParams struct {
	TrainingHyperParams *TrainingHyperParams `protobuf:"bytes,4,opt,name=training_hyper_params,json=trainingHyperParams,proto3,oneof"`
}

type JobMetrics_WorkflowFeature struct {
	WorkflowFeature *WorkflowFeature `protobuf:"bytes,5,opt,name=workflow_feature,json=workflowFeature,proto3,oneof"`
}

type JobMetrics_TrainingSetFeature struct {
	TrainingSetFeature *TrainingSetFeature `protobuf:"bytes,6,opt,name=training_set_feature,json=trainingSetFeature,proto3,oneof"`
}

type JobMetrics_ModelFeature struct {
	ModelFeature *ModelFeature `protobuf:"bytes,7,opt,name=model_feature,json=modelFeature,proto3,oneof"`
}

type JobMetrics_RuntimeInfo struct {
	RuntimeInfo *RuntimeInfo `protobuf:"bytes,8,opt,name=runtime_info,json=runtimeInfo,proto3,oneof"`
}

type JobMetrics_JobExitReason struct {
	JobExitReason string `protobuf:"bytes,9,opt,name=job_exit_reason,json=jobExitReason,proto3,oneof"`
}

type JobMetrics_ExtraInfo struct {
	ExtraInfo string `protobuf:"bytes,10,opt,name=extra_info,json=extraInfo,proto3,oneof"`
}

type JobMetrics_Type struct {
	Type string `protobuf:"bytes,11,opt,name=type,proto3,oneof"`
}

type JobMetrics_Resource struct {
	Resource string `protobuf:"bytes,12,opt,name=resource,proto3,oneof"`
}

type JobMetrics_CustomizedData struct {
	CustomizedData string `protobuf:"bytes,13,opt,name=customized_data,json=customizedData,proto3,oneof"`
}

type JobMetrics_JobOptimization struct {
	JobOptimization *JobOptimization `protobuf:"bytes,14,opt,name=job_optimization,json=jobOptimization,proto3,oneof"`
}

func (*JobMetrics_TrainingHyperParams) isJobMetrics_Metrics() {}

func (*JobMetrics_WorkflowFeature) isJobMetrics_Metrics() {}

func (*JobMetrics_TrainingSetFeature) isJobMetrics_Metrics() {}

func (*JobMetrics_ModelFeature) isJobMetrics_Metrics() {}

func (*JobMetrics_RuntimeInfo) isJobMetrics_Metrics() {}

func (*JobMetrics_JobExitReason) isJobMetrics_Metrics() {}

func (*JobMetrics_ExtraInfo) isJobMetrics_Metrics() {}

func (*JobMetrics_Type) isJobMetrics_Metrics() {}

func (*JobMetrics_Resource) isJobMetrics_Metrics() {}

func (*JobMetrics_CustomizedData) isJobMetrics_Metrics() {}

func (*JobMetrics_JobOptimization) isJobMetrics_Metrics() {}

type OptimizeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptimizerConfigRetriever string            `protobuf:"bytes,1,opt,name=optimizer_config_retriever,json=optimizerConfigRetriever,proto3" json:"optimizer_config_retriever,omitempty"`
	DataStore                string            `protobuf:"bytes,2,opt,name=data_store,json=dataStore,proto3" json:"data_store,omitempty"`
	BrainProcessor           string            `protobuf:"bytes,3,opt,name=brain_processor,json=brainProcessor,proto3" json:"brain_processor,omitempty"`
	CustomizedConfig         map[string]string `protobuf:"bytes,4,rep,name=customized_config,json=customizedConfig,proto3" json:"customized_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OptimizeConfig) Reset() {
	*x = OptimizeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizeConfig) ProtoMessage() {}

func (x *OptimizeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizeConfig.ProtoReflect.Descriptor instead.
func (*OptimizeConfig) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{8}
}

func (x *OptimizeConfig) GetOptimizerConfigRetriever() string {
	if x != nil {
		return x.OptimizerConfigRetriever
	}
	return ""
}

func (x *OptimizeConfig) GetDataStore() string {
	if x != nil {
		return x.DataStore
	}
	return ""
}

func (x *OptimizeConfig) GetBrainProcessor() string {
	if x != nil {
		return x.BrainProcessor
	}
	return ""
}

func (x *OptimizeConfig) GetCustomizedConfig() map[string]string {
	if x != nil {
		return x.CustomizedConfig
	}
	return nil
}

type PodState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uid            string            `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Type           string            `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	IsOom          bool              `protobuf:"varint,4,opt,name=is_oom,json=isOom,proto3" json:"is_oom,omitempty"`
	Resource       *PodResource      `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	UsedResource   *PodResource      `protobuf:"bytes,6,opt,name=used_resource,json=usedResource,proto3" json:"used_resource,omitempty"`
	CustomizedData map[string]string `protobuf:"bytes,7,rep,name=customized_data,json=customizedData,proto3" json:"customized_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PodState) Reset() {
	*x = PodState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodState) ProtoMessage() {}

func (x *PodState) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodState.ProtoReflect.Descriptor instead.
func (*PodState) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{9}
}

func (x *PodState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodState) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PodState) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PodState) GetIsOom() bool {
	if x != nil {
		return x.IsOom
	}
	return false
}

func (x *PodState) GetResource() *PodResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *PodState) GetUsedResource() *PodResource {
	if x != nil {
		return x.UsedResource
	}
	return nil
}

func (x *PodState) GetCustomizedData() map[string]string {
	if x != nil {
		return x.CustomizedData
	}
	return nil
}

type JobState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      int64                `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Pods           map[string]*PodState `protobuf:"bytes,2,rep,name=pods,proto3" json:"pods,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Speed          float32              `protobuf:"fixed32,3,opt,name=speed,proto3" json:"speed,omitempty"`
	CustomizedData map[string]string    `protobuf:"bytes,4,rep,name=customized_data,json=customizedData,proto3" json:"customized_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JobState) Reset() {
	*x = JobState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobState) ProtoMessage() {}

func (x *JobState) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobState.ProtoReflect.Descriptor instead.
func (*JobState) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{10}
}

func (x *JobState) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *JobState) GetPods() map[string]*PodState {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *JobState) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *JobState) GetCustomizedData() map[string]string {
	if x != nil {
		return x.CustomizedData
	}
	return nil
}

type OptimizeJobMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string    `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Cluster   string    `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace string    `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	State     *JobState `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *OptimizeJobMeta) Reset() {
	*x = OptimizeJobMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizeJobMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizeJobMeta) ProtoMessage() {}

func (x *OptimizeJobMeta) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizeJobMeta.ProtoReflect.Descriptor instead.
func (*OptimizeJobMeta) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{11}
}

func (x *OptimizeJobMeta) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *OptimizeJobMeta) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *OptimizeJobMeta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *OptimizeJobMeta) GetState() *JobState {
	if x != nil {
		return x.State
	}
	return nil
}

type OptimizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Config *OptimizeConfig    `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Jobs   []*OptimizeJobMeta `protobuf:"bytes,3,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *OptimizeRequest) Reset() {
	*x = OptimizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizeRequest) ProtoMessage() {}

func (x *OptimizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizeRequest.ProtoReflect.Descriptor instead.
func (*OptimizeRequest) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{12}
}

func (x *OptimizeRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OptimizeRequest) GetConfig() *OptimizeConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *OptimizeRequest) GetJobs() []*OptimizeJobMeta {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type PodResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memory   int64   `protobuf:"varint,1,opt,name=memory,proto3" json:"memory,omitempty"` // unit MB
	Cpu      float32 `protobuf:"fixed32,2,opt,name=cpu,proto3" json:"cpu,omitempty"`      // The number of cores
	Gpu      float32 `protobuf:"fixed32,3,opt,name=gpu,proto3" json:"gpu,omitempty"`
	GpuType  string  `protobuf:"bytes,4,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
	Priority string  `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *PodResource) Reset() {
	*x = PodResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodResource) ProtoMessage() {}

func (x *PodResource) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodResource.ProtoReflect.Descriptor instead.
func (*PodResource) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{13}
}

func (x *PodResource) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *PodResource) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *PodResource) GetGpu() float32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *PodResource) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *PodResource) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

type TaskGroupResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int64        `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Resource *PodResource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *TaskGroupResource) Reset() {
	*x = TaskGroupResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskGroupResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGroupResource) ProtoMessage() {}

func (x *TaskGroupResource) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGroupResource.ProtoReflect.Descriptor instead.
func (*TaskGroupResource) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{14}
}

func (x *TaskGroupResource) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaskGroupResource) GetResource() *PodResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type JobResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskGroupResources map[string]*TaskGroupResource `protobuf:"bytes,1,rep,name=task_group_resources,json=taskGroupResources,proto3" json:"task_group_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PodResources       map[string]*PodResource       `protobuf:"bytes,2,rep,name=pod_resources,json=podResources,proto3" json:"pod_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JobResource) Reset() {
	*x = JobResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResource) ProtoMessage() {}

func (x *JobResource) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResource.ProtoReflect.Descriptor instead.
func (*JobResource) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{15}
}

func (x *JobResource) GetTaskGroupResources() map[string]*TaskGroupResource {
	if x != nil {
		return x.TaskGroupResources
	}
	return nil
}

func (x *JobResource) GetPodResources() map[string]*PodResource {
	if x != nil {
		return x.PodResources
	}
	return nil
}

type JobOptimizePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64           `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Resource  *JobResource     `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Job       *OptimizeJobMeta `protobuf:"bytes,3,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *JobOptimizePlan) Reset() {
	*x = JobOptimizePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobOptimizePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobOptimizePlan) ProtoMessage() {}

func (x *JobOptimizePlan) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobOptimizePlan.ProtoReflect.Descriptor instead.
func (*JobOptimizePlan) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{16}
}

func (x *JobOptimizePlan) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *JobOptimizePlan) GetResource() *JobResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *JobOptimizePlan) GetJob() *OptimizeJobMeta {
	if x != nil {
		return x.Job
	}
	return nil
}

type JobOptimization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64            `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Config    *OptimizeConfig  `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Plan      *JobOptimizePlan `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	JobStates []*JobState      `protobuf:"bytes,4,rep,name=job_states,json=jobStates,proto3" json:"job_states,omitempty"`
}

func (x *JobOptimization) Reset() {
	*x = JobOptimization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobOptimization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobOptimization) ProtoMessage() {}

func (x *JobOptimization) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobOptimization.ProtoReflect.Descriptor instead.
func (*JobOptimization) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{17}
}

func (x *JobOptimization) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *JobOptimization) GetConfig() *OptimizeConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *JobOptimization) GetPlan() *JobOptimizePlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *JobOptimization) GetJobStates() []*JobState {
	if x != nil {
		return x.JobStates
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{18}
}

func (x *Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Response) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type OptimizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response         *Response          `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	JobOptimizePlans []*JobOptimizePlan `protobuf:"bytes,2,rep,name=job_optimize_plans,json=jobOptimizePlans,proto3" json:"job_optimize_plans,omitempty"`
}

func (x *OptimizeResponse) Reset() {
	*x = OptimizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizeResponse) ProtoMessage() {}

func (x *OptimizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizeResponse.ProtoReflect.Descriptor instead.
func (*OptimizeResponse) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{19}
}

func (x *OptimizeResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *OptimizeResponse) GetJobOptimizePlans() []*JobOptimizePlan {
	if x != nil {
		return x.JobOptimizePlans
	}
	return nil
}

type JobMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobUuid string `protobuf:"bytes,1,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
}

func (x *JobMetricsRequest) Reset() {
	*x = JobMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobMetricsRequest) ProtoMessage() {}

func (x *JobMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobMetricsRequest.ProtoReflect.Descriptor instead.
func (*JobMetricsRequest) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{20}
}

func (x *JobMetricsRequest) GetJobUuid() string {
	if x != nil {
		return x.JobUuid
	}
	return ""
}

type JobMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	JobMetrics string    `protobuf:"bytes,2,opt,name=job_metrics,json=jobMetrics,proto3" json:"job_metrics,omitempty"`
}

func (x *JobMetricsResponse) Reset() {
	*x = JobMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dlrover_proto_brain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobMetricsResponse) ProtoMessage() {}

func (x *JobMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dlrover_proto_brain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobMetricsResponse.ProtoReflect.Descriptor instead.
func (*JobMetricsResponse) Descriptor() ([]byte, []int) {
	return file_dlrover_proto_brain_proto_rawDescGZIP(), []int{21}
}

func (x *JobMetricsResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *JobMetricsResponse) GetJobMetrics() string {
	if x != nil {
		return x.JobMetrics
	}
	return ""
}

var File_dlrover_proto_brain_proto protoreflect.FileDescriptor

var file_dlrover_proto_brain_proto_rawDesc = []byte{
	0x0a, 0x19, 0x64, 0x6c, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x67, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x53, 0x74, 0x65, 0x70, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x64, 0x70, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x64, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x22, 0x93, 0x03, 0x0a, 0x12, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x6e,
	0x73, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xd5, 0x04, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x44, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x76, 0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x76, 0x4f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x6b, 0x76, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x6b, 0x76, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x22, 0xe4, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70,
	0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xe2, 0x05, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a,
	0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x35, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x79, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4d, 0x0a,
	0x14, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72,
	0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x12, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6a, 0x6f,
	0x62, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x10, 0x6a,
	0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x6f,
	0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0f, 0x6a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x0e,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c,
	0x0a, 0x1a, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x43,
	0x0a, 0x15, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd5, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x6f, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4f, 0x6f,
	0x6d, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e,
	0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x02, 0x0a, 0x08,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x48, 0x0a, 0x09, 0x50, 0x6f, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e,
	0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0f,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x80,
	0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70,
	0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x59, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xec, 0x02, 0x0a,
	0x0b, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x14,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x6f,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x11, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x0f,
	0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x4a, 0x6f, 0x62, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0xba, 0x01, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a,
	0x6f, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x2e, 0x0a, 0x11, 0x4a, 0x6f,
	0x62, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x55, 0x75, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x12, 0x4a, 0x6f,
	0x62, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2a, 0xea,
	0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x5f,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x5f, 0x45, 0x78, 0x69, 0x74, 0x5f, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x32, 0xca, 0x01, 0x0a, 0x05,
	0x42, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e,
	0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1c, 0x5a, 0x1a, 0x64, 0x6c, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dlrover_proto_brain_proto_rawDescOnce sync.Once
	file_dlrover_proto_brain_proto_rawDescData = file_dlrover_proto_brain_proto_rawDesc
)

func file_dlrover_proto_brain_proto_rawDescGZIP() []byte {
	file_dlrover_proto_brain_proto_rawDescOnce.Do(func() {
		file_dlrover_proto_brain_proto_rawDescData = protoimpl.X.CompressGZIP(file_dlrover_proto_brain_proto_rawDescData)
	})
	return file_dlrover_proto_brain_proto_rawDescData
}

var file_dlrover_proto_brain_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dlrover_proto_brain_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_dlrover_proto_brain_proto_goTypes = []interface{}{
	(MetricsType)(0),            // 0: brain.MetricsType
	(*TrainingHyperParams)(nil), // 1: brain.TrainingHyperParams
	(*WorkflowFeature)(nil),     // 2: brain.WorkflowFeature
	(*TrainingSetFeature)(nil),  // 3: brain.TrainingSetFeature
	(*ModelFeature)(nil),        // 4: brain.ModelFeature
	(*RuntimeInfo)(nil),         // 5: brain.RuntimeInfo
	(*PodMeta)(nil),             // 6: brain.PodMeta
	(*JobMeta)(nil),             // 7: brain.JobMeta
	(*JobMetrics)(nil),          // 8: brain.JobMetrics
	(*OptimizeConfig)(nil),      // 9: brain.OptimizeConfig
	(*PodState)(nil),            // 10: brain.PodState
	(*JobState)(nil),            // 11: brain.JobState
	(*OptimizeJobMeta)(nil),     // 12: brain.OptimizeJobMeta
	(*OptimizeRequest)(nil),     // 13: brain.OptimizeRequest
	(*PodResource)(nil),         // 14: brain.PodResource
	(*TaskGroupResource)(nil),   // 15: brain.TaskGroupResource
	(*JobResource)(nil),         // 16: brain.JobResource
	(*JobOptimizePlan)(nil),     // 17: brain.JobOptimizePlan
	(*JobOptimization)(nil),     // 18: brain.JobOptimization
	(*Response)(nil),            // 19: brain.Response
	(*OptimizeResponse)(nil),    // 20: brain.OptimizeResponse
	(*JobMetricsRequest)(nil),   // 21: brain.JobMetricsRequest
	(*JobMetricsResponse)(nil),  // 22: brain.JobMetricsResponse
	nil,                         // 23: brain.ModelFeature.TensorAllocBytesEntry
	nil,                         // 24: brain.OptimizeConfig.CustomizedConfigEntry
	nil,                         // 25: brain.PodState.CustomizedDataEntry
	nil,                         // 26: brain.JobState.PodsEntry
	nil,                         // 27: brain.JobState.CustomizedDataEntry
	nil,                         // 28: brain.JobResource.TaskGroupResourcesEntry
	nil,                         // 29: brain.JobResource.PodResourcesEntry
	(*empty.Empty)(nil),         // 30: google.protobuf.Empty
}
var file_dlrover_proto_brain_proto_depIdxs = []int32{
	23, // 0: brain.ModelFeature.tensor_alloc_bytes:type_name -> brain.ModelFeature.TensorAllocBytesEntry
	6,  // 1: brain.RuntimeInfo.running_pods:type_name -> brain.PodMeta
	7,  // 2: brain.JobMetrics.job_meta:type_name -> brain.JobMeta
	0,  // 3: brain.JobMetrics.metrics_type:type_name -> brain.MetricsType
	1,  // 4: brain.JobMetrics.training_hyper_params:type_name -> brain.TrainingHyperParams
	2,  // 5: brain.JobMetrics.workflow_feature:type_name -> brain.WorkflowFeature
	3,  // 6: brain.JobMetrics.training_set_feature:type_name -> brain.TrainingSetFeature
	4,  // 7: brain.JobMetrics.model_feature:type_name -> brain.ModelFeature
	5,  // 8: brain.JobMetrics.runtime_info:type_name -> brain.RuntimeInfo
	18, // 9: brain.JobMetrics.job_optimization:type_name -> brain.JobOptimization
	24, // 10: brain.OptimizeConfig.customized_config:type_name -> brain.OptimizeConfig.CustomizedConfigEntry
	14, // 11: brain.PodState.resource:type_name -> brain.PodResource
	14, // 12: brain.PodState.used_resource:type_name -> brain.PodResource
	25, // 13: brain.PodState.customized_data:type_name -> brain.PodState.CustomizedDataEntry
	26, // 14: brain.JobState.pods:type_name -> brain.JobState.PodsEntry
	27, // 15: brain.JobState.customized_data:type_name -> brain.JobState.CustomizedDataEntry
	11, // 16: brain.OptimizeJobMeta.state:type_name -> brain.JobState
	9,  // 17: brain.OptimizeRequest.config:type_name -> brain.OptimizeConfig
	12, // 18: brain.OptimizeRequest.jobs:type_name -> brain.OptimizeJobMeta
	14, // 19: brain.TaskGroupResource.resource:type_name -> brain.PodResource
	28, // 20: brain.JobResource.task_group_resources:type_name -> brain.JobResource.TaskGroupResourcesEntry
	29, // 21: brain.JobResource.pod_resources:type_name -> brain.JobResource.PodResourcesEntry
	16, // 22: brain.JobOptimizePlan.resource:type_name -> brain.JobResource
	12, // 23: brain.JobOptimizePlan.job:type_name -> brain.OptimizeJobMeta
	9,  // 24: brain.JobOptimization.config:type_name -> brain.OptimizeConfig
	17, // 25: brain.JobOptimization.plan:type_name -> brain.JobOptimizePlan
	11, // 26: brain.JobOptimization.job_states:type_name -> brain.JobState
	19, // 27: brain.OptimizeResponse.response:type_name -> brain.Response
	17, // 28: brain.OptimizeResponse.job_optimize_plans:type_name -> brain.JobOptimizePlan
	19, // 29: brain.JobMetricsResponse.response:type_name -> brain.Response
	10, // 30: brain.JobState.PodsEntry.value:type_name -> brain.PodState
	15, // 31: brain.JobResource.TaskGroupResourcesEntry.value:type_name -> brain.TaskGroupResource
	14, // 32: brain.JobResource.PodResourcesEntry.value:type_name -> brain.PodResource
	8,  // 33: brain.Brain.persist_metrics:input_type -> brain.JobMetrics
	13, // 34: brain.Brain.optimize:input_type -> brain.OptimizeRequest
	21, // 35: brain.Brain.get_job_metrics:input_type -> brain.JobMetricsRequest
	30, // 36: brain.Brain.persist_metrics:output_type -> google.protobuf.Empty
	20, // 37: brain.Brain.optimize:output_type -> brain.OptimizeResponse
	22, // 38: brain.Brain.get_job_metrics:output_type -> brain.JobMetricsResponse
	36, // [36:39] is the sub-list for method output_type
	33, // [33:36] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_dlrover_proto_brain_proto_init() }
func file_dlrover_proto_brain_proto_init() {
	if File_dlrover_proto_brain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dlrover_proto_brain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingHyperParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingSetFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizeJobMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskGroupResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobOptimizePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobOptimization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dlrover_proto_brain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dlrover_proto_brain_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*JobMetrics_TrainingHyperParams)(nil),
		(*JobMetrics_WorkflowFeature)(nil),
		(*JobMetrics_TrainingSetFeature)(nil),
		(*JobMetrics_ModelFeature)(nil),
		(*JobMetrics_RuntimeInfo)(nil),
		(*JobMetrics_JobExitReason)(nil),
		(*JobMetrics_ExtraInfo)(nil),
		(*JobMetrics_Type)(nil),
		(*JobMetrics_Resource)(nil),
		(*JobMetrics_CustomizedData)(nil),
		(*JobMetrics_JobOptimization)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dlrover_proto_brain_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dlrover_proto_brain_proto_goTypes,
		DependencyIndexes: file_dlrover_proto_brain_proto_depIdxs,
		EnumInfos:         file_dlrover_proto_brain_proto_enumTypes,
		MessageInfos:      file_dlrover_proto_brain_proto_msgTypes,
	}.Build()
	File_dlrover_proto_brain_proto = out.File
	file_dlrover_proto_brain_proto_rawDesc = nil
	file_dlrover_proto_brain_proto_goTypes = nil
	file_dlrover_proto_brain_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BrainClient is the client API for Brain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BrainClient interface {
	PersistMetrics(ctx context.Context, in *JobMetrics, opts ...grpc.CallOption) (*empty.Empty, error)
	Optimize(ctx context.Context, in *OptimizeRequest, opts ...grpc.CallOption) (*OptimizeResponse, error)
	GetJobMetrics(ctx context.Context, in *JobMetricsRequest, opts ...grpc.CallOption) (*JobMetricsResponse, error)
}

type brainClient struct {
	cc grpc.ClientConnInterface
}

func NewBrainClient(cc grpc.ClientConnInterface) BrainClient {
	return &brainClient{cc}
}

func (c *brainClient) PersistMetrics(ctx context.Context, in *JobMetrics, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/brain.Brain/persist_metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainClient) Optimize(ctx context.Context, in *OptimizeRequest, opts ...grpc.CallOption) (*OptimizeResponse, error) {
	out := new(OptimizeResponse)
	err := c.cc.Invoke(ctx, "/brain.Brain/optimize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainClient) GetJobMetrics(ctx context.Context, in *JobMetricsRequest, opts ...grpc.CallOption) (*JobMetricsResponse, error) {
	out := new(JobMetricsResponse)
	err := c.cc.Invoke(ctx, "/brain.Brain/get_job_metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrainServer is the server API for Brain service.
type BrainServer interface {
	PersistMetrics(context.Context, *JobMetrics) (*empty.Empty, error)
	Optimize(context.Context, *OptimizeRequest) (*OptimizeResponse, error)
	GetJobMetrics(context.Context, *JobMetricsRequest) (*JobMetricsResponse, error)
}

// UnimplementedBrainServer can be embedded to have forward compatible implementations.
type UnimplementedBrainServer struct {
}

func (*UnimplementedBrainServer) PersistMetrics(context.Context, *JobMetrics) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersistMetrics not implemented")
}
func (*UnimplementedBrainServer) Optimize(context.Context, *OptimizeRequest) (*OptimizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Optimize not implemented")
}
func (*UnimplementedBrainServer) GetJobMetrics(context.Context, *JobMetricsRequest) (*JobMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobMetrics not implemented")
}

func RegisterBrainServer(s *grpc.Server, srv BrainServer) {
	s.RegisterService(&_Brain_serviceDesc, srv)
}

func _Brain_PersistMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainServer).PersistMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brain.Brain/PersistMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainServer).PersistMetrics(ctx, req.(*JobMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brain_Optimize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainServer).Optimize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brain.Brain/Optimize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainServer).Optimize(ctx, req.(*OptimizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brain_GetJobMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainServer).GetJobMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brain.Brain/GetJobMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainServer).GetJobMetrics(ctx, req.(*JobMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Brain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "brain.Brain",
	HandlerType: (*BrainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "persist_metrics",
			Handler:    _Brain_PersistMetrics_Handler,
		},
		{
			MethodName: "optimize",
			Handler:    _Brain_Optimize_Handler,
		},
		{
			MethodName: "get_job_metrics",
			Handler:    _Brain_GetJobMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dlrover/proto/brain.proto",
}
